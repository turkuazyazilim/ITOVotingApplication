@{
    ViewData["Title"] = "Firma Yönetimi";
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Seçim Uygulaması</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    
</head>
<body class="bg-gray-50">

    <!-- Sidebar -->
    <div id="sidebar" class="fixed inset-y-0 left-0 z-50 w-64 bg-gradient-to-b from-gray-900 to-gray-800 transform -translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out">
        <!-- Logo -->
        <div class="flex items-center justify-between h-16 px-6 bg-black bg-opacity-20">
            <div class="flex items-center space-x-3">
                <img src="/Documents/images/logosmall.png" alt="Logo" class="h-8 w-8 object-contain" />
                <span class="text-white font-semibold text-lg">ITOP</span>
            </div>
            <button onclick="toggleSidebar()" class="lg:hidden text-white hover:text-gray-300">
                <i data-lucide="x" class="h-5 w-5"></i>
            </button>
        </div>

        <!-- User Info -->
        <div class="px-6 py-4 border-b border-gray-700">
            <div class="flex items-center space-x-3">
                <div class="w-10 h-10 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center">
                    <span class="text-white font-semibold" id="userInitials">SA</span>
                </div>
                <div>
                    <p class="text-white text-sm font-medium" id="userName">Yükleniyor...</p>
                    <p class="text-gray-400 text-xs" id="userRole">Admin</p>
                </div>
            </div>
        </div>

        <!-- Navigation -->
        <nav class="px-4 py-4">
            <ul class="space-y-1">
                <li>
                    <a href="/Dashboard" class="flex items-center space-x-3 px-4 py-3 text-gray-300 hover:text-white hover:bg-gray-700 hover:bg-opacity-50 rounded-lg transition-colors">
                        <i data-lucide="layout-dashboard" class="h-5 w-5"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li>
                    <a href="/Admin/Companies" class="flex items-center space-x-3 px-4 py-3 text-white bg-gray-700 bg-opacity-50 rounded-lg">
                        <i data-lucide="building-2" class="h-5 w-5"></i>
                        <span>Firmalar</span>
                    </a>
                </li>
                <li>
                    <a href="/Admin/Contacts" class="flex items-center space-x-3 px-4 py-3 text-gray-300 hover:text-white hover:bg-gray-700 hover:bg-opacity-50 rounded-lg transition-colors">
                        <i data-lucide="users" class="h-5 w-5"></i>
                        <span>Yetkililer</span>
                    </a>
                </li>
                <li>
                    <a href="/Vote" class="flex items-center space-x-3 px-4 py-3 text-gray-300 hover:text-white hover:bg-gray-700 hover:bg-opacity-50 rounded-lg transition-colors">
                        <i data-lucide="check-square" class="h-5 w-5"></i>
                        <span>Oylar</span>
                    </a>
                </li>
                <li>
                    <a href="/Admin/Users" class="flex items-center space-x-3 px-4 py-3 text-gray-300 hover:text-white hover:bg-gray-700 hover:bg-opacity-50 rounded-lg transition-colors">
                        <i data-lucide="user-cog" class="h-5 w-5"></i>
                        <span>Kullanıcılar</span>
                    </a>
                </li>
                <li>
                    <a href="#" onclick="loadReports()" class="flex items-center space-x-3 px-4 py-3 text-gray-300 hover:text-white hover:bg-gray-700 hover:bg-opacity-50 rounded-lg transition-colors">
                        <i data-lucide="bar-chart-3" class="h-5 w-5"></i>
                        <span>Raporlar</span>
                    </a>
                </li>
            </ul>
        </nav>

        <!-- Logout -->
        <div class="absolute bottom-0 left-0 right-0 p-4">
            <button onclick="logout()" class="w-full flex items-center justify-center space-x-2 px-4 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                <i data-lucide="log-out" class="h-5 w-5"></i>
                <span>Çıkış Yap</span>
            </button>
        </div>
    </div>

    <!-- Main Content -->
    <div class="lg:ml-64 min-h-screen">
        <!-- Top Bar -->
        <div class="bg-white shadow-sm border-b border-gray-200">
            <div class="flex items-center justify-between h-16 px-4 lg:px-6">
                <div class="flex items-center space-x-4">
                    <button onclick="toggleSidebar()" class="lg:hidden text-gray-600 hover:text-gray-900 p-2 rounded-lg hover:bg-gray-100 transition-colors touch-manipulation">
                        <i data-lucide="menu" class="h-6 w-6"></i>
                    </button>
                    <div class="lg:hidden">
                        <div class="flex items-center justify-between h-16 px-4 lg:px-6 bg-opacity-20">
                            <div class="flex items-center space-x-3">
                                <img src="/Documents/images/logosmall.png" alt="Logo" class="h-8 w-8 object-contain" />
                                <span class="text-black font-semibold text-lg">ITOP</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex items-center space-x-4">
                    <!-- Search -->
                    <div class="hidden md:block relative">
                        <input type="text" id="globalSearch" placeholder="Firma ara... (3+ karakter ile API araması)"
                               class="w-64 pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <i data-lucide="search" class="absolute left-3 top-2.5 h-5 w-5 text-gray-400"></i>
                    </div>

                    <!-- Add New Company Button -->
                    <button onclick="openCreateModal()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2">
                        <i data-lucide="plus" class="h-4 w-4"></i>
                        <span>Yeni Firma</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Page Content -->
        <div class="p-4 lg:p-6">
            <!-- Page Header -->
            <div class="mb-4">
                <h1 class="text-2xl font-bold text-gray-900">Firma Yönetimi</h1>
                <p class="text-gray-600">Firmaları görüntüleyin ve yönetin</p>
            </div>

        </div>

            <!-- Mobile Search -->
            <div class="md:hidden bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-4">
                <div class="relative">
                    <i data-lucide="search" class="absolute left-3 top-2.5 h-5 w-5 text-gray-400"></i>
                    <input type="text" id="mobileGlobalSearch" placeholder="Firma ara... (3+ karakter ile API araması)"
                           class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
            </div>

            <!-- Filters -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-4">
                <div class="grid grid-cols-1 md:grid-cols-5 gap-3">
                    <div>
                        <label class="block text-xs font-medium text-gray-700 mb-1">Firma Tipi</label>
                        <select id="typeFilter" class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                            <option value="">Tümü</option>
                            <option value="AS">A.Ş.</option>
                            <option value="LTD">Ltd. Şti.</option>
                            <option value="SAHIS">Şahıs</option>
                            <option value="KOOP">Kooperatif</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-xs font-medium text-gray-700 mb-1">Durum</label>
                        <select id="statusFilter" class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                            <option value="">Tümü</option>
                            <option value="active">Aktif</option>
                            <option value="inactive">Pasif</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-xs font-medium text-gray-700 mb-1">Yetki Belgesi</label>
                        <select id="authFilter" class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                            <option value="">Tümü</option>
                            <option value="authorized">Yetkili</option>
                            <option value="notAuthorized">Yetkisiz</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-xs font-medium text-gray-700 mb-1">Meslek Grubu</label>
                        <select id="professionalFilter" class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                            <option value="">Tümü</option>
                            <option value="5">Bilgi Teknolojileri</option>
                            <option value="1">İmalat</option>
                            <option value="2">Ticaret</option>
                            <option value="3">Hizmet</option>
                        </select>
                    </div>
                    <div class="flex items-end">
                        <button onclick="applyFilters()" class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                            <i data-lucide="filter" class="h-4 w-4 inline mr-2"></i>
                            Filtrele
                        </button>
                    </div>
                </div>
            </div>

            <!-- Companies Table Container -->
            <div id="companiesContainer" class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                <!-- Desktop table will be loaded here -->
            </div>
            
            <!-- Mobile Card View -->
            <div class="md:hidden bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden mt-4">
                <div id="companiesMobileContainer" class="divide-y divide-gray-200">
                    <!-- Mobile cards will be populated here -->
                </div>
            </div>
            
            <!-- Custom Pagination -->
            <div id="paginationContainer" class="mt-4 flex items-center justify-between">
                <!-- Pagination will be loaded here -->
            </div>
            
            <!-- Empty State -->
            <div id="emptyState" class="hidden p-8 text-center">
                <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                    <i data-lucide="building-2" class="w-8 h-8 text-gray-400"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Firma bulunamadı</h3>
                <p class="text-gray-500 mb-4">Arama kriterlerinize uygun firma bulunmuyor.</p>
                <button onclick="clearFilters()" class="text-blue-600 hover:text-blue-700 text-sm font-medium">
                    Filtreleri temizle
                </button>
            </div>

        </div>
    </div>

    <!-- Edit Company Modal -->
    <div id="editCompanyModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-[60] overflow-y-auto">
        <div class="min-h-screen flex items-center justify-center p-4">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[95vh] flex flex-col">
                <!-- Modal Header - Fixed -->
                <div class="px-4 py-3 border-b border-gray-200 flex-shrink-0">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-gray-900">Firma Düzenle</h3>
                        <button onclick="closeEditModal()" class="text-gray-400 hover:text-gray-600">
                            <i data-lucide="x" class="h-5 w-5"></i>
                        </button>
                    </div>
                </div>

                <!-- Modal Content - Scrollable -->
                <div class="flex-1 overflow-y-auto" style="max-height: calc(95vh - 120px);">
                    <form id="editCompanyForm" class="p-4 space-y-4">
                <input type="hidden" id="editCompanyId">

                <!-- Temel Bilgiler -->
                <div class="mb-4">
                    <h4 class="text-base font-medium text-gray-900 mb-3">Temel Bilgiler</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div class="md:col-span-2">
                            <label class="block text-xs font-medium text-gray-700 mb-1">Firma Unvanı *</label>
                            <input type="text" id="editTitle" required
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="Firma unvanını giriniz">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Firma Tipi *</label>
                            <select id="editCompanyType" required
                                    class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                <option value="">-- Seçiniz --</option>
                                <option value="AS">A.Ş. (Anonim Şirket)</option>
                                <option value="LTD">Ltd. Şti. (Limited Şirket)</option>
                                <option value="SAHIS">Şahıs Şirketi</option>
                                <option value="KOOP">Kooperatif</option>
                                <option value="DIGER">Diğer</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Derece</label>
                            <select id="editDegree"
                                    class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                <option value="">-- Seçiniz --</option>
                                <option value="1">1. Derece</option>
                                <option value="2">2. Derece</option>
                                <option value="3">3. Derece</option>
                                <option value="4">4. Derece</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Sicil ve Vergi Bilgileri -->
                <div class="mb-4">
                    <h4 class="text-base font-medium text-gray-900 mb-3">Sicil Bilgileri</h4>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Sicil No *</label>
                            <input type="text" id="editRegistrationNumber" required
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="Sicil numarası">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Ticaret Sicil No</label>
                            <input type="text" id="editTradeRegistrationNumber"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="Ticaret sicil no">
                        </div>
                    </div>
                </div>

                <!-- Mali Bilgiler -->
                <div class="mb-4">
                    <h4 class="text-base font-medium text-gray-900 mb-3">Mali ve Üyelik Bilgileri</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Sermaye (TL)</label>
                            <input type="number" id="editCapital"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="0">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Üyelik Tarihi</label>
                            <input type="date" id="editMemberRegistrationDate"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Meslek Grubu</label>
                            <select id="editProfessionalGroup"
                                    class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                <option value="">-- Seçiniz --</option>
                                <option value="5">Bilgi Teknolojileri</option>
                                <option value="1">İmalat</option>
                                <option value="2">Ticaret</option>
                                <option value="3">Hizmet</option>
                                <option value="4">İnşaat</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">NACE Kodu</label>
                            <select id="editNaceCode"
                                    class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                <option value="">-- Seçiniz --</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- İletişim Bilgileri -->
                <div class="mb-4">
                    <h4 class="text-base font-medium text-gray-900 mb-3">İletişim Bilgileri</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Ofis Telefonu</label>
                            <input type="tel" id="editOfficePhone"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="0212 XXX XX XX">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Cep Telefonu</label>
                            <input type="tel" id="editMobilePhone"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="0 (5XX) XXX XX XX">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">E-posta</label>
                            <input type="email" id="editEmail"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="info@firma.com">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Web Sitesi</label>
                            <input type="url" id="editWebSite"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="www.firma.com">
                        </div>
                        <div class="md:col-span-2">
                            <label class="block text-xs font-medium text-gray-700 mb-1">Adres</label>
                            <textarea id="editRegistrationAddress" rows="2"
                                      class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                      placeholder="Firma adresi"></textarea>
                        </div>
                    </div>
                </div>

                <!-- Durum ve Yetkiler -->
                <div class="mb-4">
                    <h4 class="text-base font-medium text-gray-900 mb-3">Durum ve Yetkiler</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" id="editIsActive" class="rounded border-gray-300 text-blue-600">
                                <span class="text-xs font-medium text-gray-700">Aktif Firma</span>
                            </label>
                        </div>
                        <div>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" id="editHas2022Authorization" class="rounded border-gray-300 text-blue-600">
                                <span class="text-xs font-medium text-gray-700">2022 Yetki Belgesi</span>
                            </label>
                        </div>
                    </div>
                </div>

                    </form>
                </div>

                <!-- Firma Yetkilileri Bölümü -->
                <div class="border-t border-gray-200">
                    <!-- Tab Header -->
                    <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
                        <h4 class="text-base font-medium text-gray-900 flex items-center">
                            <i data-lucide="users" class="h-4 w-4 mr-2"></i>
                            Firma Yetkilileri
                        </h4>
                    </div>

                    <!-- Yetkili Listesi -->
                    <div class="px-4 py-3 max-h-60 overflow-y-auto">
                        <div class="flex justify-between items-center mb-3">
                            <p class="text-sm text-gray-600">Bu firmaya bağlı yetkililer</p>
                            <button type="button" onclick="openAddContactModal()" 
                                    class="px-2 py-1 text-xs bg-green-600 text-white rounded hover:bg-green-700 transition-colors">
                                <i data-lucide="user-plus" class="h-3 w-3 inline mr-1"></i>
                                Yetkili Ekle
                            </button>
                        </div>
                        
                        <div id="companyContactsList" class="space-y-2">
                            <!-- Yetkililer buraya yüklenecek -->
                        </div>
                        
                        <div id="companyContactsEmpty" class="hidden text-center py-4 text-gray-500">
                            <i data-lucide="users" class="h-8 w-8 mx-auto mb-2 text-gray-300"></i>
                            <p class="text-sm">Bu firmaya henüz yetkili eklenmemiş</p>
                        </div>
                    </div>
                </div>
                
                <!-- Modal Footer - Fixed -->
                <div class="px-4 py-3 border-t border-gray-200 flex-shrink-0 bg-gray-50">
                    <div class="flex justify-between items-center">
                        <button type="button" onclick="openDocumentManagement()"
                                class="px-3 py-1.5 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors flex items-center space-x-2">
                            <i data-lucide="file-text" class="w-4 h-4"></i>
                            <span>Belge Yönetimi</span>
                        </button>
                        <div class="flex space-x-2">
                            <button type="button" onclick="closeEditModal()"
                                    class="px-3 py-1.5 text-sm border border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition-colors">
                                İptal
                            </button>
                            <button type="button" onclick="document.getElementById('editCompanyForm').requestSubmit()"
                                    class="px-3 py-1.5 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
                                <i data-lucide="save" class="h-3 w-3 inline mr-1"></i>
                                Güncelle
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Create Company Modal -->
    <div id="createCompanyModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-[60] overflow-y-auto">
        <div class="min-h-screen flex items-center justify-center p-4">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[95vh] flex flex-col">
                <!-- Modal Header - Fixed -->
                <div class="px-4 py-3 border-b border-gray-200 flex-shrink-0">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-gray-900">Yeni Firma Ekle</h3>
                        <button onclick="closeCreateModal()" class="text-gray-400 hover:text-gray-600">
                            <i data-lucide="x" class="h-5 w-5"></i>
                        </button>
                    </div>
                </div>

                <!-- Modal Content - Scrollable -->
                <div class="flex-1 overflow-y-auto" style="max-height: calc(95vh - 120px);">
                    <form id="createCompanyForm" class="p-4 space-y-4">
                <!-- Temel Bilgiler -->
                <div class="mb-4">
                    <h4 class="text-base font-medium text-gray-900 mb-3">Temel Bilgiler</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div class="md:col-span-2">
                            <label class="block text-xs font-medium text-gray-700 mb-1">Firma Unvanı *</label>
                            <input type="text" id="createTitle" required
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="Firma unvanını giriniz">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Firma Tipi *</label>
                            <select id="createCompanyType" required
                                    class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                <option value="">-- Seçiniz --</option>
                                <option value="AS">A.Ş. (Anonim Şirket)</option>
                                <option value="LTD">Ltd. Şti. (Limited Şirket)</option>
                                <option value="SAHIS">Şahıs Şirketi</option>
                                <option value="KOOP">Kooperatif</option>
                                <option value="DIGER">Diğer</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Derece</label>
                            <select id="createDegree"
                                    class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                <option value="">-- Seçiniz --</option>
                                <option value="1">1. Derece</option>
                                <option value="2">2. Derece</option>
                                <option value="3">3. Derece</option>
                                <option value="4">4. Derece</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Sicil ve Vergi Bilgileri -->
                <div class="mb-4">
                    <h4 class="text-base font-medium text-gray-900 mb-3">Sicil Bilgileri</h4>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Sicil No *</label>
                            <input type="text" id="createRegistrationNumber" required
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="Sicil numarası">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Ticaret Sicil No</label>
                            <input type="text" id="createTradeRegistrationNumber"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="Ticaret sicil no">
                        </div>
                    </div>
                </div>

                <!-- Mali Bilgiler -->
                <div class="mb-4">
                    <h4 class="text-base font-medium text-gray-900 mb-3">Mali ve Üyelik Bilgileri</h4>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Sermaye (TL)</label>
                            <input type="number" id="createCapital"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="0">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Üyelik Tarihi</label>
                            <input type="date" id="createMemberRegistrationDate"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Meslek Grubu</label>
                            <select id="createProfessionalGroup"
                                    class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                <option value="">-- Seçiniz --</option>
                                <option value="5">Bilgi Teknolojileri</option>
                                <option value="1">İmalat</option>
                                <option value="2">Ticaret</option>
                                <option value="3">Hizmet</option>
                                <option value="4">İnşaat</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">NACE Kodu</label>
                            <select id="createNaceCode"
                                    class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                <option value="">-- Seçiniz --</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- İletişim Bilgileri -->
                <div class="mb-4">
                    <h4 class="text-base font-medium text-gray-900 mb-3">İletişim Bilgileri</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Ofis Telefonu</label>
                            <input type="tel" id="createOfficePhone"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="0212 XXX XX XX">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Cep Telefonu</label>
                            <input type="tel" id="createMobilePhone"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="0 (5XX) XXX XX XX">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">E-posta</label>
                            <input type="email" id="createEmail"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="info@firma.com">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Web Sitesi</label>
                            <input type="url" id="createWebSite"
                                   class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                   placeholder="www.firma.com">
                        </div>
                        <div class="md:col-span-2">
                            <label class="block text-xs font-medium text-gray-700 mb-1">Adres</label>
                            <textarea id="createRegistrationAddress" rows="2"
                                      class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                      placeholder="Firma adresi"></textarea>
                        </div>
                    </div>
                </div>

                <!-- Durum ve Yetkiler -->
                <div class="mb-4">
                    <h4 class="text-base font-medium text-gray-900 mb-3">Durum ve Yetkiler</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" id="createIsActive" checked class="rounded border-gray-300 text-blue-600">
                                <span class="text-xs font-medium text-gray-700">Aktif Firma</span>
                            </label>
                        </div>
                        <div>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" id="createHas2022Authorization" class="rounded border-gray-300 text-blue-600">
                                <span class="text-xs font-medium text-gray-700">2022 Yetki Belgesi</span>
                            </label>
                        </div>
                    </div>
                </div>

                    </form>
                </div>
                
                <!-- Modal Footer - Fixed -->
                <div class="px-4 py-3 border-t border-gray-200 flex-shrink-0 bg-gray-50">
                    <div class="flex justify-between items-center">
                        <p class="text-xs text-gray-500">* işaretli alanlar zorunludur</p>
                        <div class="flex space-x-2">
                            <button type="button" onclick="closeCreateModal()"
                                    class="px-3 py-1.5 text-sm border border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition-colors">
                                İptal
                            </button>
                            <button type="button" onclick="document.getElementById('createCompanyForm').requestSubmit()"
                                    class="px-3 py-1.5 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
                                <i data-lucide="save" class="h-3 w-3 inline mr-1"></i>
                                Kaydet
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Contact Modal -->
    <div id="addContactModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-[80] overflow-y-auto">
        <div class="min-h-screen flex items-center justify-center p-4">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] flex flex-col">
                <!-- Modal Header -->
                <div class="px-4 py-3 border-b border-gray-200 flex-shrink-0">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-gray-900">Firmaya Yetkili Ekle</h3>
                        <button onclick="closeAddContactModal()" class="text-gray-400 hover:text-gray-600">
                            <i data-lucide="x" class="h-5 w-5"></i>
                        </button>
                    </div>
                </div>

                <!-- Modal Content -->
                <div class="flex-1 overflow-y-auto" style="max-height: calc(90vh - 120px);">
                    <form id="addContactForm" class="p-4 space-y-4">
                        <!-- Mevcut Company ID (hidden) -->
                        <input type="hidden" id="addContactCompanyId">

                        <!-- Kişisel Bilgiler -->
                        <div class="mb-4">
                            <h4 class="text-base font-medium text-gray-900 mb-3">Kişisel Bilgiler</h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Ad *</label>
                                    <input type="text" id="addContactFirstName" required
                                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                           placeholder="Adını giriniz">
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Soyad *</label>
                                    <input type="text" id="addContactLastName" required
                                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                           placeholder="Soyadını giriniz">
                                </div>
                                <div class="md:col-span-2">
                                    <label class="block text-xs font-medium text-gray-700 mb-1">TC Kimlik No *</label>
                                    <input type="text" id="addContactIdentityNum" maxlength="11" required
                                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                           placeholder="12345678901">
                                </div>
                            </div>
                        </div>

                        <!-- Yetki Bilgileri -->
                        <div class="mb-4">
                            <h4 class="text-base font-medium text-gray-900 mb-3">Yetki Bilgileri</h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Yetki Tipi</label>
                                    <select id="addContactAuthorizationType"
                                            class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                        <option value="">-- Seçiniz --</option>
                                        <option value="1">Firma Yetkilisi</option>
                                        <option value="2">Vekil</option>
                                        <option value="3">Temsilci</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Komite</label>
                                    <select id="addContactCommitteeId"
                                            class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                        <option value="">-- Seçiniz --</option>
                                        <option value="1">Yönetim Kurulu</option>
                                        <option value="2">Denetleme Kurulu</option>
                                        <option value="3">Disiplin Kurulu</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- İletişim Bilgileri -->
                        <div class="mb-4">
                            <h4 class="text-base font-medium text-gray-900 mb-3">İletişim Bilgileri</h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Cep Telefonu</label>
                                    <input type="tel" id="addContactMobilePhone"
                                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                           placeholder="0 (5XX) XXX XX XX">
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">E-posta</label>
                                    <input type="email" id="addContactEmail"
                                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                           placeholder="email@example.com">
                                </div>
                            </div>
                        </div>

                        <!-- Yetkiler -->
                        <div class="mb-4">
                            <h4 class="text-base font-medium text-gray-900 mb-3">Yetkiler</h4>
                            <div class="grid grid-cols-1 gap-3">
                                <div>
                                    <label class="flex items-center space-x-2">
                                        <input type="checkbox" id="addContactEligibleToVote" checked class="rounded border-gray-300 text-blue-600">
                                        <span class="text-xs font-medium text-gray-700">Oy kullanma yetkisi</span>
                                    </label>
                                    <p class="text-xs text-gray-500 mt-1 ml-6">
                                        İşaretli ise "Oy Kullanacak Kişi", değilse "Bağlantı Kişi" olarak kaydedilir
                                    </p>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

                <!-- Modal Footer -->
                <div class="px-4 py-3 border-t border-gray-200 flex-shrink-0 bg-gray-50">
                    <div class="flex justify-between items-center">
                        <p class="text-xs text-gray-500">* işaretli alanlar zorunludur</p>
                        <div class="flex space-x-2">
                            <button type="button" onclick="closeAddContactModal()"
                                    class="px-3 py-1.5 text-sm border border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition-colors">
                                İptal
                            </button>
                            <button type="button" onclick="document.getElementById('addContactForm').requestSubmit()"
                                    class="px-3 py-1.5 text-sm bg-green-600 text-white rounded hover:bg-green-700 transition-colors">
                                <i data-lucide="user-plus" class="h-3 w-3 inline mr-1"></i>
                                Yetkili Ekle
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Contact Modal -->
    <div id="editContactModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-[80] overflow-y-auto">
        <div class="min-h-screen flex items-center justify-center p-4">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] flex flex-col">
                <!-- Modal Header -->
                <div class="px-4 py-3 border-b border-gray-200 flex-shrink-0">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-gray-900">Yetkili Düzenle</h3>
                        <button onclick="closeEditContactModal()" class="text-gray-400 hover:text-gray-600">
                            <i data-lucide="x" class="h-5 w-5"></i>
                        </button>
                    </div>
                </div>

                <!-- Modal Content -->
                <div class="flex-1 overflow-y-auto" style="max-height: calc(90vh - 120px);">
                    <form id="editContactForm" class="p-4 space-y-4">
                        <!-- Contact ID (hidden) -->
                        <input type="hidden" id="editContactId">
                        <input type="hidden" id="editContactCompanyId">

                        <!-- Kişisel Bilgiler -->
                        <div class="mb-4">
                            <h4 class="text-base font-medium text-gray-900 mb-3">Kişisel Bilgiler</h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Ad *</label>
                                    <input type="text" id="editContactFirstName" required
                                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                           placeholder="Adını giriniz">
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Soyad *</label>
                                    <input type="text" id="editContactLastName" required
                                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                           placeholder="Soyadını giriniz">
                                </div>
                                <div class="md:col-span-2">
                                    <label class="block text-xs font-medium text-gray-700 mb-1">TC Kimlik No *</label>
                                    <input type="text" id="editContactIdentityNum" maxlength="11" required
                                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                           placeholder="12345678901">
                                </div>
                            </div>
                        </div>

                        <!-- Yetki Bilgileri -->
                        <div class="mb-4">
                            <h4 class="text-base font-medium text-gray-900 mb-3">Yetki Bilgileri</h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Yetki Tipi</label>
                                    <select id="editContactAuthorizationType"
                                            class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                        <option value="">-- Seçiniz --</option>
                                        <option value="1">Firma Yetkilisi</option>
                                        <option value="2">Vekil</option>
                                        <option value="3">Temsilci</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Komite</label>
                                    <select id="editContactCommitteeId"
                                            class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                                        <option value="">-- Seçiniz --</option>
                                        <option value="1">Yönetim Kurulu</option>
                                        <option value="2">Denetleme Kurulu</option>
                                        <option value="3">Disiplin Kurulu</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- İletişim Bilgileri -->
                        <div class="mb-4">
                            <h4 class="text-base font-medium text-gray-900 mb-3">İletişim Bilgileri</h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Cep Telefonu</label>
                                    <input type="tel" id="editContactMobilePhone"
                                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                           placeholder="0 (5XX) XXX XX XX">
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">E-posta</label>
                                    <input type="email" id="editContactEmail"
                                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                           placeholder="email@example.com">
                                </div>
                            </div>
                        </div>

                        <!-- Yetkiler -->
                        <div class="mb-4">
                            <h4 class="text-base font-medium text-gray-900 mb-3">Yetkiler</h4>
                            <div class="grid grid-cols-1 gap-3">
                                <div>
                                    <label class="flex items-center space-x-2">
                                        <input type="checkbox" id="editContactEligibleToVote" class="rounded border-gray-300 text-blue-600">
                                        <span class="text-xs font-medium text-gray-700">Oy kullanma yetkisi</span>
                                    </label>
                                    <p class="text-xs text-gray-500 mt-1 ml-6">
                                        İşaretli ise "Oy Kullanacak Kişi", değilse "Bağlantı Kişi" olarak kaydedilir
                                    </p>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

                <!-- Modal Footer -->
                <div class="px-4 py-3 border-t border-gray-200 flex-shrink-0 bg-gray-50">
                    <div class="flex justify-between items-center">
                        <p class="text-xs text-gray-500">* işaretli alanlar zorunludur</p>
                        <div class="flex space-x-2">
                            <button type="button" onclick="closeEditContactModal()"
                                    class="px-3 py-1.5 text-sm border border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition-colors">
                                İptal
                            </button>
                            <button type="button" onclick="document.getElementById('editContactForm').requestSubmit()"
                                    class="px-3 py-1.5 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
                                <i data-lucide="save" class="h-3 w-3 inline mr-1"></i>
                                Güncelle
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Document Management Modal -->
    <div id="documentManagementModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-[90] overflow-y-auto">
        <div class="min-h-screen flex items-center justify-center p-4">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] flex flex-col">
                <!-- Modal Header -->
                <div class="px-6 py-4 border-b border-gray-200 flex-shrink-0">
                    <div class="flex items-center justify-between">
                        <h3 class="text-xl font-semibold text-gray-900 flex items-center space-x-2">
                            <i data-lucide="file-text" class="w-5 h-5"></i>
                            <span>Belge Yönetimi</span>
                        </h3>
                        <button onclick="closeDocumentManagement()" class="text-gray-400 hover:text-gray-600">
                            <i data-lucide="x" class="h-6 w-6"></i>
                        </button>
                    </div>
                </div>

                <!-- Modal Content -->
                <div class="flex-1 overflow-y-auto" style="max-height: calc(90vh - 140px);">
                    <!-- Documents List -->
                    <div class="p-6">
                        <h4 class="text-lg font-medium text-gray-900 mb-4">Belgeler</h4>
                        <div id="documentsList" class="space-y-3">
                            <!-- Documents will be loaded here -->
                            <div class="text-center py-8 text-gray-500">
                                <i data-lucide="file-x" class="w-12 h-12 mx-auto mb-2 opacity-50"></i>
                                <p>Henüz belge eklenmemiş</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal Footer -->
                <div class="px-6 py-4 border-t border-gray-200 flex-shrink-0 bg-gray-50">
                    <div class="flex justify-end">
                        <button type="button" onclick="closeDocumentManagement()"
                                class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                            Kapat
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Send Document Modal -->
    <div id="sendDocumentModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-[100] overflow-y-auto">
        <div class="min-h-screen flex items-center justify-center p-4">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] flex flex-col">
                <!-- Modal Header -->
                <div class="px-6 py-4 border-b border-gray-200 flex-shrink-0">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-gray-900 flex items-center space-x-2">
                            <i data-lucide="send" class="w-5 h-5"></i>
                            <span>Belgeyi Gönder</span>
                        </h3>
                        <button onclick="closeSendDocumentModal()" class="text-gray-400 hover:text-gray-600">
                            <i data-lucide="x" class="h-6 w-6"></i>
                        </button>
                    </div>
                </div>

                <!-- Modal Content -->
                <div class="flex-1 overflow-y-auto p-6">
                    <form id="sendDocumentForm" class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Yetkili Seçin</label>
                            <select id="contactSelect" required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="">Yetkili seçin...</option>
                            </select>
                        </div>
                        
                        <div id="selectedContactInfo" class="hidden">
                            <div class="bg-gray-50 p-3 rounded-lg">
                                <h4 class="text-sm font-medium text-gray-700 mb-2">Seçilen Yetkili</h4>
                                <div class="text-sm text-gray-600">
                                    <p><strong>Ad Soyad:</strong> <span id="contactName"></span></p>
                                    <p><strong>Telefon:</strong> <span id="contactPhone"></span></p>
                                    <p><strong>E-posta:</strong> <span id="contactEmail"></span></p>
                                    <p><strong>Yetki:</strong> <span id="contactType"></span></p>
                                </div>
                            </div>
                        </div>

                        <div class="flex justify-end space-x-3 pt-4">
                            <button type="button" onclick="closeSendDocumentModal()"
                                    class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                                İptal
                            </button>
                            <button type="button" onclick="sendDocumentViaWhatsApp()"
                                    class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center" 
                                    title="WhatsApp'la Gönder">
                                <i data-lucide="message-circle" class="w-4 h-4"></i>
                            </button>
                            <button type="button" onclick="sendDocumentViaEmail()"
                                    class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center" 
                                    title="Email ile Gönder">
                                <i data-lucide="mail" class="w-4 h-4"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- İmzalı Belge Yükleme Modal -->
    <div id="uploadSignedDocumentModal" class="fixed inset-0 bg-black bg-opacity-50 z-[100] hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-gray-900">İmzalı Belge Yükle</h3>
                        <button type="button" onclick="closeUploadSignedDocumentModal()"
                                class="text-gray-400 hover:text-gray-600 transition-colors">
                            <i data-lucide="x" class="w-5 h-5"></i>
                        </button>
                    </div>

                    <form id="uploadSignedDocumentForm" enctype="multipart/form-data">
                        <input type="hidden" id="uploadCompanyId" value="">
                        
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                İmzalı Yetki Belgesi Dosyası
                            </label>
                            <input type="file" id="signedDocumentFile" name="signedDocumentFile" 
                                   accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                   required>
                            <p class="text-xs text-gray-500 mt-1">
                                Desteklenen formatlar: PDF, DOC, DOCX, JPG, JPEG, PNG
                            </p>
                        </div>

                        <div class="flex justify-end space-x-3">
                            <button type="button" onclick="closeUploadSignedDocumentModal()"
                                    class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
                                İptal
                            </button>
                            <button type="button" onclick="submitUploadSignedDocument()"
                                    class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
                                <i data-lucide="upload" class="w-4 h-4 inline mr-1"></i>
                                Yükle
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Onaylı Belge Yükleme Modal -->
    <div id="uploadApprovedDocumentModal" class="fixed inset-0 bg-black bg-opacity-50 z-[100] hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-gray-900">Onaylı Belge Yükle</h3>
                        <button type="button" onclick="closeUploadApprovedDocumentModal()"
                                class="text-gray-400 hover:text-gray-600 transition-colors">
                            <i data-lucide="x" class="w-5 h-5"></i>
                        </button>
                    </div>

                    <form id="uploadApprovedDocumentForm" enctype="multipart/form-data">
                        <input type="hidden" id="uploadApprovedCompanyId" value="">
                        
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Onaylı Yetki Belgesi Dosyası
                            </label>
                            <input type="file" id="approvedDocumentFile" name="approvedDocumentFile" 
                                   accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                   required>
                            <p class="text-xs text-gray-500 mt-1">
                                Desteklenen formatlar: PDF, DOC, DOCX, JPG, JPEG, PNG
                            </p>
                        </div>

                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Kaynak Yeri
                            </label>
                            <select id="approvedDocumentSource" name="approvedDocumentSource" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    required>
                                <option value="">Kaynak seçin...</option>
                                <option value="STK">STK</option>
                                <option value="Kurum">Kurum</option>
                                <option value="Şahıs">Şahıs</option>
                            </select>
                        </div>

                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Not
                            </label>
                            <input type="text" id="approvedDocumentNote" name="approvedDocumentNote" 
                                   placeholder="Not ekleyebilirsiniz (isteğe bağlı)"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        </div>

                        <div class="flex justify-end space-x-3">
                            <button type="button" onclick="closeUploadApprovedDocumentModal()"
                                    class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
                                İptal
                            </button>
                            <button type="button" onclick="submitUploadApprovedDocument()"
                                    class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">
                                <i data-lucide="upload" class="w-4 h-4 inline mr-1"></i>
                                Yükle
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Mobile Sidebar Overlay -->
    <div id="sidebarOverlay" onclick="toggleSidebar()"
         class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden lg:hidden"></div>

    <script>
        let allCompanies = [];
        let filteredCompanies = [];
        let currentPage = 1;
        let pageSize = 10;
        let totalCount = 0;
        let totalPages = 0;
        let searchTimeout = null;
        let currentSearchTerm = '';
        let isSearching = false;
        let currentCompanyId = null;

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded');

            // Check if user is authenticated (server-side)
            const isAuthenticated = '@User.Identity.IsAuthenticated'.toLowerCase() === 'true';
            if (!isAuthenticated) {
                console.error('User not authenticated');
                window.location.href = '/Auth/Login';
                return;
            }

            console.log('User authenticated, loading companies...');
            
            // Load user info
            loadUserInfo();

            // jQuery yüklenmiş mi kontrol et
            if (typeof jQuery === 'undefined') {
                console.error('jQuery is not loaded!');
            } else {
                console.log('jQuery version:', jQuery.fn.jquery);
            }

            lucide.createIcons();
            loadUserInfo();
            loadCompanies();
            
            // Global search event handler
            document.getElementById('globalSearch')?.addEventListener('input', function() {
                currentPage = 1;
                handleGlobalSearch();
            });
            
            // Mobile search event handler
            document.getElementById('mobileGlobalSearch')?.addEventListener('input', function() {
                // Sync with desktop search
                const mobileValue = this.value;
                const desktopSearch = document.getElementById('globalSearch');
                if (desktopSearch) {
                    desktopSearch.value = mobileValue;
                }
                currentPage = 1;
                handleGlobalSearch();
            });
            
            // Contact selection change handler
            document.getElementById('contactSelect')?.addEventListener('change', function() {
                const selectedValue = this.value;
                const selectedContactInfo = document.getElementById('selectedContactInfo');
                
                if (selectedValue) {
                    try {
                        const contact = JSON.parse(selectedValue);
                        
                        // Fill contact info
                        document.getElementById('contactName').textContent = `${contact.firstName} ${contact.lastName}`;
                        document.getElementById('contactPhone').textContent = contact.mobilePhone || '-';
                        document.getElementById('contactEmail').textContent = contact.email || '-';
                        document.getElementById('contactType').textContent = contact.eligibleToVote ? 'Oy Kullanacak Kişi' : 'Bağlantı Kişi';
                        
                        // Show contact info
                        selectedContactInfo.classList.remove('hidden');
                    } catch (error) {
                        console.error('Error parsing contact data:', error);
                        selectedContactInfo.classList.add('hidden');
                    }
                } else {
                    // Hide contact info if no selection
                    selectedContactInfo.classList.add('hidden');
                }
            });
        });

        // Toggle Sidebar
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebarOverlay');

            sidebar.classList.toggle('-translate-x-full');
            overlay.classList.toggle('hidden');
        }

        // Load User Info
        function loadUserInfo() {
            const user = JSON.parse(localStorage.getItem('user') || '{}');
            if (user) {
                document.getElementById('userName').textContent = user.fullName || user.firstName + ' ' + user.lastName || 'Kullanıcı';
                document.getElementById('userRole').textContent = user.roles ? user.roles[0] : 'Kullanıcı';

                const initials = ((user.firstName || '')[0] + (user.lastName || '')[0]).toUpperCase();
                document.getElementById('userInitials').textContent = initials || 'KA';
            }
        }

        // Load Companies
        async function loadCompanies() {
            try {
                // Loading göstergesi ekleyin
                const container = document.getElementById('companiesContainer');
                container.innerHTML = `
                    <div class="p-8 text-center">
                        <div class="inline-flex items-center space-x-2">
                            <svg class="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span class="text-gray-600">Firmalar yükleniyor...</span>
                        </div>
                    </div>
                `;

                const response = await fetch('/api/company?pageSize=500', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin' // Include cookies for authentication
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('API Response:', result); // Debug için

                    // API'den gelen veriyi kontrol et - ApiResponse<PagedResult<CompanyDto>> format
                    console.log('Response structure:', {
                        hasSuccess: 'success' in result,
                        success: result.success,
                        hasData: 'data' in result,
                        dataType: typeof result.data,
                        dataHasItems: result.data && 'items' in result.data
                    });

                    if (result && result.success && result.data) {
                        // PagedResult format: { items: [], totalCount: 0, ... }
                        if (result.data.items && Array.isArray(result.data.items)) {
                            allCompanies = result.data.items;
                            console.log('✅ Using PagedResult.items, companies found:', allCompanies.length);
                        } 
                        // Direct array in data
                        else if (Array.isArray(result.data)) {
                            allCompanies = result.data;
                            console.log('✅ Using direct array in data, companies found:', allCompanies.length);
                        }
                        // Unexpected format
                        else {
                            console.warn('❌ Unexpected data format in result.data:', result.data);
                            allCompanies = getDemoCompanies();
                        }
                        
                        // IsActive sıralaması: Aktifler önce, sonra pasifler
                        allCompanies.sort((a, b) => {
                            if (a.isActive === b.isActive) {
                                // Aynı durumda ise isme göre sırala
                                return a.title.localeCompare(b.title, 'tr');
                            }
                            // Aktifler önce (true > false)
                            return b.isActive - a.isActive;
                        });
                    } 
                    // API returned error or no success flag
                    else {
                        console.warn('❌ API returned unsuccessful response or unexpected format');
                        console.log('Full result:', result);
                        // Don't use demo data immediately, show empty state
                        allCompanies = [];
                    }

                    displayCompanies();
                } else {
                    console.error('Failed to load companies, status:', response.status);

                    // Hata detayını göster
                    try {
                        const errorData = await response.json();
                        console.error('Error details:', errorData);
                    } catch(e) {
                        console.error('Could not parse error response');
                    }

                    // API failed, show empty state for now
                    allCompanies = [];
                    displayCompanies();
                }
            } catch (error) {
                console.error('Error loading companies:', error);

                // Network error, show empty state for now  
                allCompanies = [];
                displayCompanies();
            }
        }

        // Handle Global Search
        function handleGlobalSearch() {
            const searchTerm = document.getElementById('globalSearch')?.value?.trim() || '';
            
            // Önceki timeout'u temizle
            if (searchTimeout) {
                clearTimeout(searchTimeout);
            }

            // Eğer arama terimi boşsa tüm firmaları yükle
            if (!searchTerm) {
                currentSearchTerm = '';
                isSearching = false;
                // Arama temizlendiğinde tüm firmaları tekrar yükle
                loadCompanies();
                return;
            }

            // 3 karakterden az ise normal display
            if (searchTerm.length < 3) {
                currentSearchTerm = '';
                isSearching = false;
                displayCompanies();
                return;
            }

            // Loading göster
            showSearchLoading();

            // 300ms bekle, sonra API'ye git (debounce)
            searchTimeout = setTimeout(async () => {
                currentSearchTerm = searchTerm;
                isSearching = true;
                await searchCompaniesFromAPI(searchTerm);
            }, 300);
        }

        function showSearchLoading() {
            const container = document.getElementById('companiesContainer');
            container.innerHTML = `
                <div class="p-8 text-center">
                    <div class="inline-flex items-center space-x-2">
                        <svg class="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span class="text-gray-600">Firmalar aranıyor...</span>
                    </div>
                </div>
            `;
        }

        async function searchCompaniesFromAPI(searchTerm) {
            try {
                const response = await fetch(`/api/company?pageSize=50&searchTerm=${encodeURIComponent(searchTerm)}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('Company search API Response:', result);

                    if (result && result.success && result.data) {
                        if (result.data.items && Array.isArray(result.data.items)) {
                            allCompanies = result.data.items;
                        } else if (Array.isArray(result.data)) {
                            allCompanies = result.data;
                        } else {
                            allCompanies = [];
                        }
                        
                        // IsActive sıralaması: Aktifler önce, sonra pasifler
                        allCompanies.sort((a, b) => {
                            if (a.isActive === b.isActive) {
                                // Aynı durumda ise isme göre sırala
                                return a.title.localeCompare(b.title, 'tr');
                            }
                            // Aktifler önce (true > false)
                            return b.isActive - a.isActive;
                        });
                    } else {
                        allCompanies = [];
                    }

                    displayCompanies();
                } else {
                    console.error('Company search API failed:', response.status);
                    // Hata durumunda yerel arama yap
                    if (allCompanies.length > 0) {
                        filteredCompanies = allCompanies.filter(company => 
                            company.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                            company.registrationNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                            company.email?.toLowerCase().includes(searchTerm.toLowerCase())
                        );
                        displayCompanies();
                    } else {
                        allCompanies = [];
                        displayCompanies();
                    }
                }
            } catch (error) {
                console.error('Company search error:', error);
                // Hata durumunda yerel arama yap
                if (allCompanies.length > 0) {
                    filteredCompanies = allCompanies.filter(company => 
                        company.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        company.registrationNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        company.email?.toLowerCase().includes(searchTerm.toLowerCase())
                    );
                    displayCompanies();
                } else {
                    allCompanies = [];
                    displayCompanies();
                }
            }
        }

        // Display Companies (Custom Pagination)
        function displayCompanies() {
            const container = document.getElementById('companiesContainer');
            const mobileContainer = document.getElementById('companiesMobileContainer');
            
            // Apply current filters
            if (isSearching) {
                // Arama modundayken API'den gelen sonuçları doğrudan kullan
                filteredCompanies = [...allCompanies];
            } else {
                // Normal modda local filtreleme yap
                filteredCompanies = [...allCompanies];
                
                // Apply search if any (sadece 3 karakterden az için)
                const searchTerm = document.getElementById('globalSearch')?.value?.toLowerCase();
                if (searchTerm && searchTerm.length < 3) {
                    filteredCompanies = filteredCompanies.filter(company => 
                        company.title?.toLowerCase().includes(searchTerm) ||
                        company.registrationNumber?.toLowerCase().includes(searchTerm) ||
                        company.email?.toLowerCase().includes(searchTerm)
                    );
                }
            }
            
            // Apply other filters
            const typeFilter = document.getElementById('typeFilter')?.value;
            const statusFilter = document.getElementById('statusFilter')?.value;
            const authFilter = document.getElementById('authFilter')?.value;
            const professionalFilter = document.getElementById('professionalFilter')?.value;

            if (typeFilter) {
                filteredCompanies = filteredCompanies.filter(c => c.companyType === typeFilter);
            }

            if (statusFilter === 'active') {
                filteredCompanies = filteredCompanies.filter(c => c.isActive);
            } else if (statusFilter === 'inactive') {
                filteredCompanies = filteredCompanies.filter(c => !c.isActive);
            }

            if (authFilter === 'authorized') {
                filteredCompanies = filteredCompanies.filter(c => c.has2022AuthorizationCertificate);
            } else if (authFilter === 'notAuthorized') {
                filteredCompanies = filteredCompanies.filter(c => !c.has2022AuthorizationCertificate);
            }

            if (professionalFilter) {
                filteredCompanies = filteredCompanies.filter(c => c.professionalGroup == professionalFilter);
            }
            
            // Update totals
            totalCount = filteredCompanies.length;
            totalPages = Math.ceil(totalCount / pageSize);
            
            // Get current page data
            const startIndex = (currentPage - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, totalCount);
            const currentCompanies = filteredCompanies.slice(startIndex, endIndex);

            if (currentCompanies.length === 0) {
                container.innerHTML = `
                    <div class="p-8 text-center text-gray-500">
                        <i data-lucide="building-2" class="w-12 h-12 mx-auto mb-4"></i>
                        <p>Hiç firma bulunamadı</p>
                    </div>
                `;
                if (mobileContainer) {
                    mobileContainer.innerHTML = '';
                }
                updatePagination();
                lucide.createIcons();
                return;
            }

            // Desktop table - sadece md ve üzeri ekranlarda görünür
            let html = `
                <div class="hidden md:block overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-gray-50 border-b border-gray-200">
                            <tr>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Firma</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tip</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">İletişim</th>
                                <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Durum</th>
                                <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Yetki</th>
                                <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">İşlemler</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
            `;

            currentCompanies.forEach(company => {
                html += `
                    <tr class="hover:bg-gray-50">
                        <td class="px-4 py-4">
                            <div>
                                <p class="font-medium text-gray-900">${company.title}</p>
                                <p class="text-xs text-gray-500">Sicil No: ${company.registrationNumber || '-'}</p>
                            </div>
                        </td>
                        <td class="px-4 py-4">
                            <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full
                                ${company.companyType === 'AS' ? 'bg-purple-100 text-purple-800' :
                                  company.companyType === 'LTD' ? 'bg-orange-100 text-orange-800' :
                                  'bg-gray-100 text-gray-800'}">
                                ${company.companyType}
                            </span>
                        </td>
                        <td class="px-4 py-4">
                            <p class="text-sm text-gray-900">${company.officePhone || company.mobilePhone || '-'}</p>
                            <p class="text-xs text-gray-500">${company.email || '-'}</p>
                        </td>
                        <td class="px-4 py-4 text-center">
                            ${company.isActive ?
                                '<span class="inline-flex px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800">Aktif</span>' :
                                '<span class="inline-flex px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800">Pasif</span>'
                            }
                        </td>
                        <td class="px-4 py-4 text-center">
                            ${company.has2022AuthorizationCertificate ?
                                '<span class="inline-flex px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800">Var</span>' :
                                '<span class="inline-flex px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-600">Yok</span>'
                            }
                        </td>
                        <td class="px-4 py-4 text-center">
                            <div class="flex items-center justify-center space-x-2">
                                <button onclick="editCompany(${company.id})"
                                        class="text-blue-600 hover:text-blue-800" title="Düzenle">
                                    <i data-lucide="edit" class="h-4 w-4"></i>
                                </button>
                                <button onclick="deleteCompany(${company.id})"
                                        class="text-red-600 hover:text-red-800" title="Sil">
                                    <i data-lucide="trash-2" class="h-4 w-4"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            html += `
                    </tbody>
                </table>
            </div>
            `;

            container.innerHTML = html;

            // Mobile cards - sadece küçük ekranlarda görünür
            let mobileHtml = '';
            currentCompanies.forEach(company => {
                mobileHtml += `
                    <div class="p-4 hover:bg-gray-50">
                        <div class="flex items-start justify-between mb-2">
                            <div class="flex-1">
                                <h3 class="font-medium text-gray-900 text-sm">${company.title}</h3>
                                <p class="text-xs text-gray-500 mt-1">Sicil: ${company.registrationNumber}</p>
                            </div>
                            <div class="flex items-center space-x-1 ml-2">
                                <button onclick="editCompany(${company.id})" class="p-1 text-blue-600 hover:text-blue-800">
                                    <i data-lucide="edit" class="h-4 w-4"></i>
                                </button>
                                <button onclick="deleteCompany(${company.id})" class="p-1 text-red-600 hover:text-red-800">
                                    <i data-lucide="trash-2" class="h-4 w-4"></i>
                                </button>
                            </div>
                        </div>
                        <div class="flex items-center space-x-4 text-xs">
                            <span class="inline-flex px-2 py-1 rounded-full
                                ${company.companyType === 'AS' ? 'bg-purple-100 text-purple-800' :
                                  company.companyType === 'LTD' ? 'bg-orange-100 text-orange-800' :
                                  'bg-gray-100 text-gray-800'}">
                                ${company.companyType}
                            </span>
                            ${company.isActive ?
                                '<span class="inline-flex px-2 py-1 rounded-full bg-green-100 text-green-800">Aktif</span>' :
                                '<span class="inline-flex px-2 py-1 rounded-full bg-red-100 text-red-800">Pasif</span>'
                            }
                            ${company.has2022AuthorizationCertificate ?
                                '<span class="inline-flex px-2 py-1 rounded-full bg-blue-100 text-blue-800">Yetkili</span>' :
                                '<span class="inline-flex px-2 py-1 rounded-full bg-gray-100 text-gray-600">Yetkisiz</span>'
                            }
                        </div>
                        ${(company.officePhone || company.mobilePhone || company.email) ? `
                            <div class="mt-2 text-xs text-gray-600">
                                ${company.officePhone || company.mobilePhone ? `<p>${company.officePhone || company.mobilePhone}</p>` : ''}
                                ${company.email ? `<p>${company.email}</p>` : ''}
                            </div>
                        ` : ''}
                    </div>
                `;
            });

            if (mobileContainer) {
                mobileContainer.innerHTML = mobileHtml;
            }

            updatePagination();
            lucide.createIcons();
        }

        // Update Pagination
        function updatePagination() {
            const container = document.getElementById('paginationContainer');

            if (totalPages <= 1) {
                container.innerHTML = '';
                return;
            }

            const startRecord = totalCount > 0 ? (currentPage - 1) * pageSize + 1 : 0;
            const endRecord = Math.min(currentPage * pageSize, totalCount);

            let html = `
                <div class="text-sm text-gray-700">
                    Toplam <span class="font-semibold">${totalCount}</span> firmadan
                    <span class="font-semibold">${startRecord}</span> -
                    <span class="font-semibold">${endRecord}</span>
                    arası gösteriliyor
                </div>
                <div class="flex items-center space-x-1">
            `;

            // İlk sayfa
            if (currentPage > 1) {
                html += `
                    <button onclick="goToPage(1)"
                            class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-800 transition-colors duration-200">
                        İlk
                    </button>
                `;
            }

            // Önceki sayfa
            if (currentPage > 1) {
                html += `
                    <button onclick="goToPage(${currentPage - 1})"
                            class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-800 transition-colors duration-200">
                        Önceki
                    </button>
                `;
            }

            // Sayfa numaraları
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            for (let i = startPage; i <= endPage; i++) {
                if (i === currentPage) {
                    html += `
                        <button class="px-3 py-2 text-sm font-medium text-white bg-blue-600 border border-blue-600 rounded-md hover:bg-blue-700 transition-colors duration-200">
                            ${i}
                        </button>
                    `;
                } else {
                    html += `
                        <button onclick="goToPage(${i})"
                                class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-800 transition-colors duration-200">
                            ${i}
                        </button>
                    `;
                }
            }

            // Sonraki sayfa
            if (currentPage < totalPages) {
                html += `
                    <button onclick="goToPage(${currentPage + 1})"
                            class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-800 transition-colors duration-200">
                        Sonraki
                    </button>
                `;
            }

            // Son sayfa
            if (currentPage < totalPages) {
                html += `
                    <button onclick="goToPage(${totalPages})"
                            class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-800 transition-colors duration-200">
                        Son
                    </button>
                `;
            }

            html += '</div>';
            container.innerHTML = html;
        }

        // Go to Page
        function goToPage(page) {
            currentPage = page;
            displayCompanies();
        }

        // Apply Filters
        function applyFilters() {
            currentPage = 1; // Reset to first page when applying filters
            displayCompanies();
        }

        // Clear Filters  
        function clearFilters() {
            document.getElementById('typeFilter').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('authFilter').value = '';
            document.getElementById('professionalFilter').value = '';
            document.getElementById('globalSearch').value = '';
            document.getElementById('mobileGlobalSearch').value = '';
            
            // Arama durumunu temizle
            currentSearchTerm = '';
            isSearching = false;
            
            // Timeout'u temizle
            if (searchTimeout) {
                clearTimeout(searchTimeout);
            }
            
            currentPage = 1;
            
            // İlk veriyi tekrar yükle
            loadCompanies();
        }


        // Edit Company
        async function editCompany(id) {
            const company = allCompanies.find(c => c.id === id);
            if (company) {
                console.log('Edit company called with company:', company);
                console.log('Company NACE code:', company.naceCode);
                
                // Load NACE codes for edit modal first
                await loadNaceCodesForEdit();
                
                // Fill form fields
                document.getElementById('editCompanyId').value = company.id;
                document.getElementById('editTitle').value = company.title || '';
                document.getElementById('editCompanyType').value = company.companyType || '';
                document.getElementById('editDegree').value = company.degree || '';
                document.getElementById('editRegistrationNumber').value = company.registrationNumber || '';
                document.getElementById('editTradeRegistrationNumber').value = company.tradeRegistrationNumber || '';
                document.getElementById('editCapital').value = company.capital || '';
                
                // Format date for input
                if (company.memberRegistrationDate) {
                    const date = new Date(company.memberRegistrationDate);
                    document.getElementById('editMemberRegistrationDate').value = date.toISOString().split('T')[0];
                } else {
                    document.getElementById('editMemberRegistrationDate').value = '';
                }
                
                document.getElementById('editProfessionalGroup').value = company.professionalGroup || '';
                
                // Set NACE code directly after await
                const naceSelect = document.getElementById('editNaceCode');
                const naceValue = company.naceCode || '';
                console.log('Setting NACE code to:', naceValue);
                console.log('Available options:', Array.from(naceSelect.options).map(o => ({value: o.value, text: o.text})));
                
                naceSelect.value = naceValue;
                console.log('NACE select value after setting:', naceSelect.value);
                
                // Eğer hala set olmadıysa, tekrar dene
                if (naceSelect.value !== naceValue && naceValue) {
                    setTimeout(() => {
                        naceSelect.value = naceValue;
                        console.log('NACE select value after timeout:', naceSelect.value);
                    }, 50);
                }
                
                document.getElementById('editOfficePhone').value = company.officePhone || '';
                document.getElementById('editMobilePhone').value = company.mobilePhone || '';
                document.getElementById('editEmail').value = company.email || '';
                document.getElementById('editWebSite').value = company.webSite || '';
                document.getElementById('editRegistrationAddress').value = company.registrationAddress || '';
                document.getElementById('editIsActive').checked = company.isActive;
                document.getElementById('editHas2022Authorization').checked = company.has2022AuthorizationCertificate;

                // Firma yetkililerini yükle
                await loadCompanyContacts(company.id);

                const editModal = document.getElementById('editCompanyModal');
                console.log('Opening edit modal for company:', company.title);
                console.log('Edit modal element:', editModal);
                editModal.classList.remove('hidden');
                lucide.createIcons();
            }
        }

        // Close Edit Modal
        function closeEditModal() {
            document.getElementById('editCompanyModal').classList.add('hidden');
        }

        // Belge Yönetimi Modal
        function openDocumentManagement() {
            const companyId = document.getElementById('editCompanyId').value;
            if (!companyId) {
                alert('Lütfen önce firmayı seçin.');
                return;
            }
            
            currentCompanyId = companyId;
            console.log('Opening document management for company:', companyId);
            document.getElementById('documentManagementModal').classList.remove('hidden');
            loadCompanyDocuments(companyId);
        }

        function closeDocumentManagement() {
            document.getElementById('documentManagementModal').classList.add('hidden');
        }


        // Firma Belgelerini Yükle
        async function loadCompanyDocuments(companyId) {
            try {
                console.log('Loading documents for company:', companyId);
                
                // API'den belgeleri getir
                const response = await fetch(`/api/company/${companyId}/documents`, {
                    method: 'GET',
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        displayCompanyDocuments(result.documents);
                    } else {
                        console.error('API Error:', result.message);
                        displayCompanyDocuments([]);
                    }
                } else {
                    console.error('HTTP Error:', response.status);
                    displayCompanyDocuments([]);
                }
                
            } catch (error) {
                console.error('Error loading documents:', error);
                displayCompanyDocuments([]);
            }
        }

        // Belgeleri Görüntüle
        function displayCompanyDocuments(documents) {
            const listContainer = document.getElementById('documentsList');
            
            if (!documents || documents.length === 0) {
                listContainer.innerHTML = `
                    <div class="text-center py-8 text-gray-500">
                        <i data-lucide="file-x" class="w-12 h-12 mx-auto mb-2 opacity-50"></i>
                        <p>Henüz belge eklenmemiş</p>
                    </div>
                `;
                lucide.createIcons();
                return;
            }

            listContainer.innerHTML = documents.map(doc => `
                <div class="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow relative">
                    <!-- Mobil Dropdown Buton - Sağ Üst Köşe -->
                    <div class="lg:hidden absolute top-2 right-2">
                        <button onclick="toggleDocumentActions(${doc.id})" 
                                class="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-colors" 
                                title="İşlemler">
                            <i data-lucide="more-vertical" class="w-4 h-4"></i>
                        </button>
                        <div id="docActions${doc.id}" class="hidden absolute right-0 top-full mt-1 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                            ${doc.type === 'authorization' && doc.status === 'uploaded' ? `
                            <button onclick="downloadApprovedDocument(); toggleDocumentActions(${doc.id})" 
                                    class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-blue-50 flex items-center space-x-2">
                                <i data-lucide="download" class="w-4 h-4 text-blue-600"></i>
                                <span>İndir</span>
                            </button>
                            ` : ''}
                            ${doc.type === 'registration' && doc.status === 'uploaded' ? `
                            <button onclick="downloadDocument(${doc.id}); toggleDocumentActions(${doc.id})" 
                                    class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-blue-50 flex items-center space-x-2">
                                <i data-lucide="download" class="w-4 h-4 text-blue-600"></i>
                                <span>İndir</span>
                            </button>
                            ` : ''}
                            ${doc.type === 'registration' ? `
                            <button onclick="downloadTemplateDocument(); toggleDocumentActions(${doc.id})" 
                                    class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-orange-50 flex items-center space-x-2">
                                <i data-lucide="file-text" class="w-4 h-4 text-orange-600"></i>
                                <span>Örnek İndir</span>
                            </button>
                            <button onclick="openSendDocumentModal(); toggleDocumentActions(${doc.id})" 
                                    class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-green-50 flex items-center space-x-2">
                                <i data-lucide="send" class="w-4 h-4 text-green-600"></i>
                                <span>Belgeyi Gönder</span>
                            </button>
                            <button onclick="uploadSignedDocument(); toggleDocumentActions(${doc.id})" 
                                    class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-purple-50 flex items-center space-x-2">
                                <i data-lucide="upload" class="w-4 h-4 text-purple-600"></i>
                                <span>İmzalı Belge Yükle</span>
                            </button>
                            ${doc.status === 'uploaded' ? `
                            <button onclick="deleteDocument('${doc.type}', '${doc.name}'); toggleDocumentActions(${doc.id})" 
                                    class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-red-50 flex items-center space-x-2">
                                <i data-lucide="trash-2" class="w-4 h-4 text-red-600"></i>
                                <span>Belge Sil</span>
                            </button>
                            ` : ''}
                            ` : ''}
                            ${doc.type === 'authorization' ? `
                            <button onclick="uploadApprovedDocument(); toggleDocumentActions(${doc.id})" 
                                    class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-indigo-50 flex items-center space-x-2">
                                <i data-lucide="upload" class="w-4 h-4 text-indigo-600"></i>
                                <span>Onaylı Belge Yükle</span>
                            </button>
                            ${doc.status === 'uploaded' ? `
                            <button onclick="deleteDocument('${doc.type}', '${doc.name}'); toggleDocumentActions(${doc.id})" 
                                    class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-red-50 flex items-center space-x-2">
                                <i data-lucide="trash-2" class="w-4 h-4 text-red-600"></i>
                                <span>Belge Sil</span>
                            </button>
                            ` : ''}
                            ` : ''}
                        </div>
                    </div>
                    
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3 pr-8 lg:pr-0">
                            <div class="flex-shrink-0">
                                ${getDocumentIcon(doc.type)}
                            </div>
                            <div class="flex-1 min-w-0">
                                <h5 class="text-sm font-medium text-gray-900 truncate">${doc.name}</h5>
                                <p class="text-xs text-gray-500">${doc.fileName} • ${doc.size} • ${formatDate(doc.uploadDate)}</p>
                                ${doc.description ? `<p class="text-xs text-gray-600 mt-1">${doc.description}</p>` : ''}
                            </div>
                        </div>
                        <!-- Desktop Butonlar -->
                        <div class="hidden lg:flex flex-col items-end space-y-1">
                            <!-- Üst sıra: Ana işlem butonları -->
                            <div class="flex items-center space-x-1 flex-wrap">
                                ${doc.type === 'authorization' ? `
                                <button onclick="uploadApprovedDocument()" 
                                        class="px-3 py-1.5 text-sm bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors flex items-center space-x-1 whitespace-nowrap" 
                                        title="Onaylı Belge Yükle">
                                    <i data-lucide="upload" class="w-4 h-4"></i>
                                    <span>Onaylı Belge Yükle</span>
                                </button>
                                ` : ''}
                                ${doc.type === 'registration' ? `
                                <button onclick="downloadTemplateDocument()"
                                                class="px-3 py-1.5 text-sm bg-gray-600 text-white rounded hover:bg-green-700 transition-colors flex items-center space-x-1 whitespace-nowrap"
                                                title="Örnek Belge İndir">
                                    <i data-lucide="file-text" class="w-4 h-4"></i>
                                    <span>Örnek İndir</span>
                                </button>
                                <button onclick="openSendDocumentModal()" 
                                        class="px-3 py-1.5 text-sm bg-green-600 text-white rounded hover:bg-green-700 transition-colors flex items-center space-x-1 whitespace-nowrap" 
                                        title="Örnek Belgeyi Gönder">
                                    <i data-lucide="send" class="w-4 h-4"></i>
                                    <span>Belgeyi Gönder</span>
                                </button>
                                <button onclick="uploadSignedDocument()" 
                                        class="px-3 py-1.5 text-sm bg-purple-600 text-white rounded hover:bg-purple-700 transition-colors flex items-center space-x-1 whitespace-nowrap" 
                                        title="İmzalı Belge Yükle">
                                    <i data-lucide="upload" class="w-4 h-4"></i>
                                    <span>İmzalı Belge Yükle</span>
                                </button>
                                ` : ''}
                            </div>
                            
                            <!-- Alt sıra: İndir ve Sil butonları -->
                            <div class="flex items-center space-x-1">
                                ${doc.type === 'authorization' && doc.status === 'uploaded' ? `
                                <button onclick="downloadApprovedDocument()" 
                                        class="px-3 py-1.5 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors flex items-center space-x-1" 
                                        title="Onaylı Belgeyi İndir">
                                    <i data-lucide="download" class="w-4 h-4"></i>
                                    <span>İndir</span>
                                </button>
                                ` : ''}
                                ${doc.type === 'registration' && doc.status === 'uploaded' ? `
                                <button onclick="downloadDocument(${doc.id})" 
                                        class="px-3 py-1.5 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors flex items-center space-x-1" 
                                        title="İndir">
                                    <i data-lucide="download" class="w-4 h-4"></i>
                                    <span>İndir</span>
                                </button>
                                ` : ''}
                                ${doc.status === 'uploaded' ? `
                                <button onclick="deleteDocument('${doc.type}', '${doc.name}')" 
                                        class="px-3 py-1.5 text-sm bg-red-600 text-white rounded hover:bg-red-700 transition-colors flex items-center space-x-1 whitespace-nowrap" 
                                        title="Belge Sil">
                                    <i data-lucide="trash-2" class="w-4 h-4"></i>
                                    <span>Belge Sil</span>
                                </button>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');

            lucide.createIcons();
        }

        // Belge Türü İkonu
        function getDocumentIcon(type) {
            const icons = {
                'authorization': '<i data-lucide="award" class="w-8 h-8 text-blue-600"></i>',
                'registration': '<i data-lucide="file-text" class="w-8 h-8 text-green-600"></i>',
                'tax': '<i data-lucide="receipt" class="w-8 h-8 text-orange-600"></i>',
                'identity': '<i data-lucide="user-check" class="w-8 h-8 text-purple-600"></i>',
                'other': '<i data-lucide="file" class="w-8 h-8 text-gray-600"></i>'
            };
            return icons[type] || icons['other'];
        }

        // Tarih Formatla
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('tr-TR');
        }

        // Belge İşlemleri
        async function downloadDocument(documentId) {
            console.log('Downloading document:', documentId);
            // TODO: Implement download functionality
            alert('İndirme özelliği backend hazırlandıktan sonra aktif olacak.');
        }

        async function viewDocument(documentId) {
            console.log('Viewing document:', documentId);
            // TODO: Implement view functionality
            alert('Görüntüleme özelliği backend hazırlandıktan sonra aktif olacak.');
        }

        // Onaylı Belge İndir
        async function downloadApprovedDocument() {
            try {
                if (!currentCompanyId) {
                    alert('Lütfen bir firma seçin.');
                    return;
                }

                // Firma bilgisini al
                const company = allCompanies.find(c => c.id == currentCompanyId);
                if (!company || !company.registrationNumber) {
                    alert('Firma sicil numarası bulunamadı.');
                    return;
                }

                // Farklı uzantıları deneyelim: .pdf, .jpg, .jpeg, .png, .doc, .docx
                const possibleExtensions = ['pdf', 'jpg', 'jpeg', 'png', 'doc', 'docx'];
                let downloadUrl = null;
                
                for (const ext of possibleExtensions) {
                    const testUrl = `/Documents/${company.registrationNumber}/${company.registrationNumber}_ITOYetkiBelgesi.${ext}`;
                    
                    // Dosyanın varlığını kontrol et
                    try {
                        const response = await fetch(testUrl, { method: 'HEAD' });
                        if (response.ok) {
                            downloadUrl = testUrl;
                            break;
                        }
                    } catch (error) {
                        // Bu uzantı için dosya yok, devam et
                        continue;
                    }
                }

                if (!downloadUrl) {
                    alert('Onaylı yetki belgesi dosyası bulunamadı. Lütfen önce belgeyi yükleyin.');
                    return;
                }

                // Dosyayı indir
                const link = document.createElement('a');
                link.href = downloadUrl;
                link.download = `${company.registrationNumber}_ITOYetkiBelgesi.${downloadUrl.split('.').pop()}`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                console.log('Approved document downloaded:', downloadUrl);
            } catch (error) {
                console.error('Download error:', error);
                alert('Belge indirme sırasında hata oluştu.');
            }
        }

        // Örnek Belge İndir
        async function downloadTemplateDocument() {
            try {
                const companyId = document.getElementById('editCompanyId').value;
                if (!companyId) {
                    alert('Lütfen önce firmayı seçin.');
                    return;
                }

                console.log('Downloading personalized template document for company:', companyId);
                
                const response = await fetch(`/api/company/${companyId}/generate-authorization-document`, {
                    method: 'GET',
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    // Dosyayı blob olarak al
                    const blob = await response.blob();
                    
                    // Dosya adını response header'dan al, yoksa default ad kullan
                    let fileName = 'Yetki_Belgesi_Talep_Dilekcesi.docx';
                    const contentDisposition = response.headers.get('content-disposition');
                    if (contentDisposition) {
                        const fileNameMatch = contentDisposition.match(/filename="(.+)"/);
                        if (fileNameMatch) {
                            fileName = fileNameMatch[1];
                        }
                    }
                    
                    // Dosyayı indir
                    const url = window.URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = fileName;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    window.URL.revokeObjectURL(url);
                    
                    console.log('Document downloaded successfully');
                } else {
                    const error = await response.json();
                    alert(error.message || 'Belge oluşturma sırasında hata oluştu.');
                }
            } catch (error) {
                console.error('Download error:', error);
                alert('Belge indirme sırasında hata oluştu.');
            }
        }

        // Belge Gönderme Modal
        async function openSendDocumentModal() {
            try {
                const companyId = document.getElementById('editCompanyId').value;
                if (!companyId) {
                    alert('Lütfen önce firmayı seçin.');
                    return;
                }

                console.log('Opening send document modal for company:', companyId);
                
                // Firma yetkililerini yükle
                await loadCompanyContactsForSending(companyId);
                
                // Modal'ı aç
                document.getElementById('sendDocumentModal').classList.remove('hidden');
                lucide.createIcons();
            } catch (error) {
                console.error('Error opening send document modal:', error);
                alert('Yetkili listesi yüklenirken hata oluştu.');
            }
        }

        function closeSendDocumentModal() {
            document.getElementById('sendDocumentModal').classList.add('hidden');
            
            // Form'u resetle
            document.getElementById('contactSelect').value = '';
            document.getElementById('selectedContactInfo').classList.add('hidden');
        }

        // Firma yetkililerini gönderme için yükle
        async function loadCompanyContactsForSending(companyId) {
            try {
                console.log('Loading contacts for sending for company:', companyId);
                
                const response = await fetch(`/api/contact/company/${companyId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin'
                });

                let contacts = [];
                if (response.ok) {
                    const result = await response.json();
                    contacts = result.data || [];
                } else {
                    console.log('API response not ok, using demo data');
                    // Demo data
                    contacts = [
                        {
                            id: 1,
                            firstName: 'Ahmet',
                            lastName: 'Yılmaz',
                            mobilePhone: '0532 123 45 67',
                            eligibleToVote: true
                        },
                        {
                            id: 2,
                            firstName: 'Mehmet',
                            lastName: 'Demir',
                            mobilePhone: '0533 987 65 43',
                            eligibleToVote: false
                        }
                    ];
                }

                // Combobox'ı doldur
                const contactSelect = document.getElementById('contactSelect');
                contactSelect.innerHTML = '<option value="">Yetkili seçin...</option>';
                
                contacts.forEach(contact => {
                    const option = document.createElement('option');
                    option.value = JSON.stringify(contact);
                    const contactType = contact.eligibleToVote ? 'Oy Kullanacak Kişi' : 'Bağlantı Kişi';
                    option.textContent = `${contact.firstName} ${contact.lastName} (${contactType}) - ${contact.mobilePhone}`;
                    contactSelect.appendChild(option);
                });

                // Change event listener ekle
                contactSelect.addEventListener('change', function() {
                    const selectedValue = this.value;
                    const contactInfo = document.getElementById('selectedContactInfo');
                    
                    if (selectedValue) {
                        const contact = JSON.parse(selectedValue);
                        document.getElementById('contactName').textContent = `${contact.firstName} ${contact.lastName}`;
                        document.getElementById('contactPhone').textContent = contact.mobilePhone || '-';
                        document.getElementById('contactEmail').textContent = contact.email || '-';
                        document.getElementById('contactType').textContent = contact.eligibleToVote ? 'Oy Kullanacak Kişi' : 'Bağlantı Kişi';
                        contactInfo.classList.remove('hidden');
                    } else {
                        contactInfo.classList.add('hidden');
                    }
                });
                
            } catch (error) {
                console.error('Error loading contacts for sending:', error);
            }
        }

        // WhatsApp ile belge gönder
        async function sendDocumentViaWhatsApp() {
            try {
                const contactSelect = document.getElementById('contactSelect');
                const selectedValue = contactSelect.value;
                
                if (!selectedValue) {
                    alert('Lütfen bir yetkili seçin.');
                    return;
                }

                const contact = JSON.parse(selectedValue);
                const companyId = document.getElementById('editCompanyId').value;
                
                console.log('Sending document link via WhatsApp to:', contact.mobilePhone);
                
                // İndirilebilir link oluştur
                const response = await fetch(`/api/company/${companyId}/generate-document-link`, {
                    method: 'GET',
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    const result = await response.json();
                    
                    if (result.success) {
                        // Telefon numarasını temizle (WhatsApp formatı için)
                        let phoneNumber = contact.mobilePhone.replace(/[^0-9]/g, '');
                        
                        // Türkiye telefon numarası formatında ise +90 ekle
                        if (phoneNumber.startsWith('0')) {
                            phoneNumber = '90' + phoneNumber.substring(1);
                        }
                        
                        // WhatsApp mesaj metni (link ile)
                        const message = `Merhaba ${contact.firstName} ${contact.lastName},

İstanbul Ticaret Odası yetki belgesi talep dilekçeniz hazırlandı.

📄 Belgeyi indirmek için aşağıdaki linki kullanın:
${result.downloadUrl}

⏰ Bu link ${result.expiresIn} süreyle geçerlidir.

İyi günler dileriz.`;
                        
                        // Mobil cihaz kontrolü
                        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                        
                        // Platform bazlı WhatsApp URL'i oluştur
                        let whatsappUrl;
                        if (isMobile) {
                            // Mobil için: whatsapp://send (doğrudan uygulama açar)
                            whatsappUrl = `whatsapp://send?phone=${phoneNumber}&text=${encodeURIComponent(message)}`;
                        } else {
                            // Masaüstü için: https://api.whatsapp.com/send (WhatsApp Web açar)
                            whatsappUrl = `https://api.whatsapp.com/send?phone=${phoneNumber}&text=${encodeURIComponent(message)}`;
                        }
                        
                        // WhatsApp'ı aç
                        if (isMobile) {
                            // Mobilde location.href kullan (uygulama scheme için daha güvenilir)
                            window.location.href = whatsappUrl;
                        } else {
                            // Masaüstünde yeni tab aç
                            window.open(whatsappUrl, '_blank');
                        }
                        
                        // Modal'ı kapat
                        closeSendDocumentModal();
                        
                        // Başarı mesajı
                        alert(`✅ WhatsApp mesajı hazırlandı!

📱 WhatsApp'ta mesaj otomatik olarak hazırlanmış ve belge indirme linki eklenmiştir.

💡 Mesajı gönderebilirsiniz.`);
                    } else {
                        alert('Belge linki oluşturma sırasında hata oluştu.');
                    }
                } else {
                    const error = await response.json();
                    alert(error.message || 'Belge linki oluşturma sırasında hata oluştu.');
                }
            } catch (error) {
                console.error('WhatsApp send error:', error);
                alert('WhatsApp gönderme sırasında hata oluştu.');
            }
        }

        // Email ile belge gönder
        async function sendDocumentViaEmail() {
            try {
                const contactSelect = document.getElementById('contactSelect');
                const selectedValue = contactSelect.value;
                
                if (!selectedValue) {
                    alert('Lütfen bir yetkili seçin.');
                    return;
                }

                const contact = JSON.parse(selectedValue);
                const companyId = document.getElementById('editCompanyId').value;
                
                if (!contact.email) {
                    alert('Seçilen yetkilinin email adresi bulunmuyor.');
                    return;
                }
                
                console.log('Preparing email with document link for:', contact.email);
                
                // İndirilebilir link oluştur
                const response = await fetch(`/api/company/${companyId}/generate-document-link`, {
                    method: 'GET',
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    const result = await response.json();
                    
                    if (result.success) {
                        // Email konusu ve içeriği (link ile)
                        const subject = `İstanbul Ticaret Odası - Yetki Belgesi Talep Dilekçesi`;
                        const body = `Sayın ${contact.firstName} ${contact.lastName},

İstanbul Ticaret Odası yetki belgesi talep dilekçeniz hazırlandı.

📄 Belgeyi indirmek için aşağıdaki linki kullanın:
${result.downloadUrl}

⏰ Bu link ${result.expiresIn} süreyle geçerlidir.

Bu belge, firmanızın resmi işlemlerinde kullanılmak üzere hazırlanmıştır.

Herhangi bir sorunuz olması durumunda bizimle iletişime geçebilirsiniz.

Saygılarımızla,
İstanbul Ticaret Odası`;

                        // Email client'ını aç
                        const mailtoUrl = `mailto:${contact.email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
                        
                        // Mobil cihaz kontrolü
                        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                        
                        if (isMobile) {
                            // Mobil için app scheme desteği
                            // Gmail app scheme
                            const gmailUrl = `googlegmail://co?to=${contact.email}&su=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
                            
                            // Outlook app scheme  
                            const outlookUrl = `ms-outlook://compose?to=${contact.email}&subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
                            
                            // Email app'i açmaya çalış
                            try {
                                // Önce Gmail'i dene
                                const iframe = document.createElement('iframe');
                                iframe.style.display = 'none';
                                iframe.src = gmailUrl;
                                document.body.appendChild(iframe);
                                
                                setTimeout(() => {
                                    document.body.removeChild(iframe);
                                    
                                    // Outlook'u dene
                                    try {
                                        window.location.href = outlookUrl;
                                    } catch (e) {
                                        // Son çare: varsayılan mailto
                                        window.location.href = mailtoUrl;
                                    }
                                    
                                    // Varsayılan mailto
                                    setTimeout(() => {
                                        window.location.href = mailtoUrl;
                                    }, 1000);
                                }, 1000);
                            } catch (e) {
                                window.location.href = mailtoUrl;
                            }
                            
                            alert(`📱 Email hazırlandı!

✅ Email uygulamanız açılacak ve belge indirme linki mesaja eklenmiş olacak.

💡 Artık dosya eklemenize gerek yok!`);
                        } else {
                            // Masaüstü için
                            window.open(mailtoUrl, '_blank');
                            
                            alert(`✅ Email hazırlandı!

📧 Email programınız açıldı ve belge indirme linki mesaja dahil edildi.

💡 Artık dosya eklemenize gerek yok, doğrudan gönderebilirsiniz!`);
                        }
                        
                        // Modal'ı kapat
                        closeSendDocumentModal();
                    } else {
                        alert('Belge linki oluşturma sırasında hata oluştu.');
                    }
                } else {
                    const error = await response.json();
                    alert(error.message || 'Belge linki oluşturma sırasında hata oluştu.');
                }
            } catch (error) {
                console.error('Email send error:', error);
                alert('Email hazırlama sırasında hata oluştu.');
            }
        }

        // Firma Yetkililerini Yükle
        async function loadCompanyContacts(companyId) {
            try {
                console.log('Loading contacts for company:', companyId);
                
                const response = await fetch(`/api/contact/company/${companyId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('Company contacts response:', result);

                    let contacts = [];
                    if (result && result.success && result.data) {
                        if (Array.isArray(result.data)) {
                            contacts = result.data;
                        }
                    }

                    displayCompanyContacts(contacts);
                } else {
                    console.error('Failed to load company contacts:', response.status);
                    // Demo data'ya geç
                    const demoContacts = getDemoContactsForCompany(companyId);
                    displayCompanyContacts(demoContacts);
                }
            } catch (error) {
                console.error('Error loading company contacts:', error);
                // Demo data'ya geç
                const demoContacts = getDemoContactsForCompany(companyId);
                displayCompanyContacts(demoContacts);
            }
        }

        // Firma Yetkililerini Göster
        function displayCompanyContacts(contacts) {
            const container = document.getElementById('companyContactsList');
            const emptyState = document.getElementById('companyContactsEmpty');

            if (!contacts || contacts.length === 0) {
                container.innerHTML = '';
                emptyState.classList.remove('hidden');
                return;
            }

            emptyState.classList.add('hidden');

            container.innerHTML = contacts.map(contact => `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg border">
                    <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                            <span class="text-xs font-medium text-blue-600">
                                ${contact.firstName[0]}${contact.lastName[0]}
                            </span>
                        </div>
                        <div>
                            <h5 class="text-sm font-medium text-gray-900">${contact.firstName} ${contact.lastName}</h5>
                            <div class="flex items-center space-x-2 text-xs text-gray-600">
                                <span>${contact.identityNum}</span>
                                <span>•</span>
                                <span class="inline-flex px-1.5 py-0.5 rounded text-xs font-medium ${
                                    contact.eligibleToVote 
                                        ? 'bg-green-100 text-green-800' 
                                        : 'bg-gray-100 text-gray-600'
                                }">
                                    ${contact.eligibleToVote ? 'Oy Kullanacak Kişi' : 'Bağlantı Kişi'}
                                </span>
                            </div>
                            ${contact.mobilePhone || contact.email ? `
                                <div class="text-xs text-gray-500 mt-1">
                                    ${contact.mobilePhone ? contact.mobilePhone : ''}
                                    ${contact.mobilePhone && contact.email ? ' • ' : ''}
                                    ${contact.email ? contact.email : ''}
                                </div>
                            ` : ''}
                        </div>
                    </div>
                    <div class="flex items-center space-x-1">
                        <button onclick="editContactInCompany(${contact.id})" 
                                class="p-1 text-blue-600 hover:text-blue-800" title="Düzenle">
                            <i data-lucide="edit" class="h-3 w-3"></i>
                        </button>
                        <button onclick="deleteContactFromCompany(${contact.id})" 
                                class="p-1 text-red-600 hover:text-red-800" title="Sil">
                            <i data-lucide="trash-2" class="h-3 w-3"></i>
                        </button>
                    </div>
                </div>
            `).join('');

            lucide.createIcons();
        }

        // Demo Contacts
        function getDemoContactsForCompany(companyId) {
            const demoContacts = [
                {
                    id: 1,
                    companyId: 1,
                    firstName: 'Ahmet',
                    lastName: 'Yılmaz',
                    identityNum: '12345678901',
                    mobilePhone: '0532 123 4567',
                    email: 'ahmet.yilmaz@abc.com',
                    eligibleToVote: true,
                    authorizationType: 1
                },
                {
                    id: 2,
                    companyId: 1,
                    firstName: 'Fatma',
                    lastName: 'Öztürk',
                    identityNum: '55566677788',
                    mobilePhone: '0535 444 3322',
                    email: 'fatma.ozturk@abc.com',
                    eligibleToVote: false,
                    authorizationType: 3
                },
                {
                    id: 3,
                    companyId: 2,
                    firstName: 'Ayşe',
                    lastName: 'Kaya',
                    identityNum: '98765432109',
                    mobilePhone: '0533 987 6543',
                    email: 'ayse.kaya@xyz.com',
                    eligibleToVote: true,
                    authorizationType: 1
                }
            ];

            return demoContacts.filter(c => c.companyId == companyId);
        }

        // Yetkili Ekle Modal Aç
        function openAddContactModal() {
            console.log('openAddContactModal called');
            
            // Mevcut firma ID'sini al
            const currentCompanyId = document.getElementById('editCompanyId').value;
            document.getElementById('addContactCompanyId').value = currentCompanyId;
            
            // Form'u temizle
            document.getElementById('addContactForm').reset();
            document.getElementById('addContactEligibleToVote').checked = true; // Default olarak oy kullanacak kişi
            
            // Modal'ı aç
            document.getElementById('addContactModal').classList.remove('hidden');
            lucide.createIcons();
        }

        // Yetkili Ekle Modal Kapat
        function closeAddContactModal() {
            document.getElementById('addContactModal').classList.add('hidden');
        }

        // Yetkili Düzenle
        async function editContactInCompany(contactId) {
            console.log('editContactInCompany called with ID:', contactId);
            
            try {
                // API'den yetkili bilgilerini al
                const response = await fetch(`/api/contact/${contactId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('Contact details response:', result);

                    let contact = null;
                    if (result && result.success && result.data) {
                        contact = result.data;
                    }

                    if (contact) {
                        populateEditContactForm(contact);
                    } else {
                        // Demo data'dan bul
                        const currentCompanyId = document.getElementById('editCompanyId').value;
                        const demoContacts = getDemoContactsForCompany(currentCompanyId);
                        contact = demoContacts.find(c => c.id == contactId);
                        
                        if (contact) {
                            populateEditContactForm(contact);
                        } else {
                            alert('Yetkili bilgileri bulunamadı!');
                            return;
                        }
                    }
                } else {
                    console.error('Failed to load contact details:', response.status);
                    // Demo data'dan bul
                    const currentCompanyId = document.getElementById('editCompanyId').value;
                    const demoContacts = getDemoContactsForCompany(currentCompanyId);
                    const contact = demoContacts.find(c => c.id == contactId);
                    
                    if (contact) {
                        populateEditContactForm(contact);
                    } else {
                        alert('Yetkili bilgileri bulunamadı!');
                        return;
                    }
                }
            } catch (error) {
                console.error('Error loading contact details:', error);
                // Demo data'dan bul
                const currentCompanyId = document.getElementById('editCompanyId').value;
                const demoContacts = getDemoContactsForCompany(currentCompanyId);
                const contact = demoContacts.find(c => c.id == contactId);
                
                if (contact) {
                    populateEditContactForm(contact);
                } else {
                    alert('Yetkili bilgileri bulunamadı!');
                    return;
                }
            }
        }

        // Edit Contact Form'unu Doldur
        function populateEditContactForm(contact) {
            console.log('Populating edit form with contact:', contact);
            
            // Hidden fields
            document.getElementById('editContactId').value = contact.id;
            document.getElementById('editContactCompanyId').value = contact.companyId;
            
            // Kişisel bilgiler
            document.getElementById('editContactFirstName').value = contact.firstName || '';
            document.getElementById('editContactLastName').value = contact.lastName || '';
            document.getElementById('editContactIdentityNum').value = contact.identityNum || '';
            
            // Yetki bilgileri
            document.getElementById('editContactAuthorizationType').value = contact.authorizationType || '';
            document.getElementById('editContactCommitteeId').value = contact.committeeId || '';
            
            // İletişim bilgileri
            document.getElementById('editContactMobilePhone').value = contact.mobilePhone || '';
            document.getElementById('editContactEmail').value = contact.email || '';
            
            // Yetkiler
            document.getElementById('editContactEligibleToVote').checked = contact.eligibleToVote || false;
            
            // Modal'ı aç
            document.getElementById('editContactModal').classList.remove('hidden');
            lucide.createIcons();
        }

        // Edit Contact Modal Kapat
        function closeEditContactModal() {
            document.getElementById('editContactModal').classList.add('hidden');
        }

        // Yetkili Sil
        async function deleteContactFromCompany(contactId) {
            if (!confirm('Bu yetkiliyi silmek istediğinizden emin misiniz?')) {
                return;
            }

            try {
                const response = await fetch(`/api/contact/${contactId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    // Yetkili listesini yenile
                    const currentCompanyId = document.getElementById('editCompanyId').value;
                    await loadCompanyContacts(currentCompanyId);
                    alert('Yetkili başarıyla silindi!');
                } else {
                    const result = await response.json();
                    alert(result.message || 'Silme işlemi başarısız!');
                }
            } catch (error) {
                console.error('Delete contact error:', error);
                alert('Bir hata oluştu!');
            }
        }

        // Open Create Modal
        function openCreateModal() {
            console.log('openCreateModal called');
            try {
                const modal = document.getElementById('createCompanyModal');
                console.log('Create modal element:', modal);
                console.log('Modal classes before:', modal.classList.toString());
                
                // Clear form
                document.getElementById('createCompanyForm').reset();
                document.getElementById('createIsActive').checked = true;

                // Load NACE codes
                loadNaceCodes();

                // Show modal
                modal.classList.remove('hidden');
                console.log('Modal classes after:', modal.classList.toString());
                lucide.createIcons();
                console.log('Create modal should be open now');
            } catch (error) {
                console.error('Error in openCreateModal:', error);
            }
        }

        // Close Create Modal
        function closeCreateModal() {
            document.getElementById('createCompanyModal').classList.add('hidden');
        }

        // Load NACE Codes
        async function loadNaceCodes() {
            // Demo NACE codes
            const naceCodes = [
                { code: '62.01.01', description: 'Bilgisayar programlama faaliyetleri' }
            ];

            const select = document.getElementById('createNaceCode');
            select.innerHTML = '<option value="">-- Seçiniz --</option>';
            naceCodes.forEach(nace => {
                const option = document.createElement('option');
                option.value = nace.code;
                option.textContent = `${nace.code} - ${nace.description}`;
                select.appendChild(option);
            });
        }

        // Load NACE Codes for Edit Modal
        function loadNaceCodesForEdit() {
            return new Promise((resolve) => {
                // Demo NACE codes
                const naceCodes = [
                    { code: '62.01.01', description: 'Bilgisayar programlama faaliyetleri' }
                ];

                const select = document.getElementById('editNaceCode');
                select.innerHTML = '<option value="">-- Seçiniz --</option>';
                naceCodes.forEach(nace => {
                    const option = document.createElement('option');
                    option.value = nace.code;
                    option.textContent = `${nace.code} - ${nace.description}`;
                    select.appendChild(option);
                });
                
                // Promise resolve et ki await çalışsın
                resolve();
            });
        }

        // Handle Add Contact Form Submit
        document.getElementById('addContactForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const contactData = {
                companyId: parseInt(document.getElementById('addContactCompanyId').value),
                firstName: document.getElementById('addContactFirstName').value,
                lastName: document.getElementById('addContactLastName').value,
                identityNum: document.getElementById('addContactIdentityNum').value,
                authorizationType: parseInt(document.getElementById('addContactAuthorizationType').value) || 1,
                committeeId: parseInt(document.getElementById('addContactCommitteeId').value) || null,
                mobilePhone: document.getElementById('addContactMobilePhone').value,
                email: document.getElementById('addContactEmail').value,
                eligibleToVote: document.getElementById('addContactEligibleToVote').checked
            };

            console.log('Creating contact:', contactData);

            try {
                const response = await fetch('/api/contact', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(contactData)
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    closeAddContactModal();
                    
                    // Yetkili listesini yenile
                    await loadCompanyContacts(contactData.companyId);
                    
                    alert('Yetkili başarıyla eklendi!');
                } else {
                    alert(result.message || 'Yetkili eklenemedi!');
                }
            } catch (error) {
                console.error('Add contact error:', error);
                alert('Bir hata oluştu!');
            }
        });

        // Handle Edit Contact Form Submit
        document.getElementById('editContactForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const contactId = document.getElementById('editContactId').value;
            const contactData = {
                id: parseInt(contactId),
                companyId: parseInt(document.getElementById('editContactCompanyId').value),
                firstName: document.getElementById('editContactFirstName').value,
                lastName: document.getElementById('editContactLastName').value,
                identityNum: document.getElementById('editContactIdentityNum').value,
                authorizationType: parseInt(document.getElementById('editContactAuthorizationType').value) || 1,
                committeeId: parseInt(document.getElementById('editContactCommitteeId').value) || null,
                mobilePhone: document.getElementById('editContactMobilePhone').value,
                email: document.getElementById('editContactEmail').value,
                eligibleToVote: document.getElementById('editContactEligibleToVote').checked
            };

            console.log('Updating contact:', contactData);

            try {
                const response = await fetch(`/api/contact/${contactId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(contactData)
                });

                if (response.ok) {
                    closeEditContactModal();
                    
                    // Yetkili listesini yenile
                    await loadCompanyContacts(contactData.companyId);
                    
                    alert('Yetkili başarıyla güncellendi!');
                } else {
                    const result = await response.json();
                    alert(result.message || 'Güncelleme başarısız!');
                }
            } catch (error) {
                console.error('Update contact error:', error);
                alert('Bir hata oluştu!');
            }
        });

        // Handle Create Form Submit
        document.getElementById('createCompanyForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const companyData = {
                title: document.getElementById('createTitle').value,
                registrationNumber: document.getElementById('createRegistrationNumber').value,
                companyType: document.getElementById('createCompanyType').value,
                tradeRegistrationNumber: document.getElementById('createTradeRegistrationNumber').value,
                capital: parseFloat(document.getElementById('createCapital').value) || 0,
                degree: document.getElementById('createDegree').value,
                memberRegistrationDate: document.getElementById('createMemberRegistrationDate').value,
                professionalGroup: document.getElementById('createProfessionalGroup').value,
                naceCode: document.getElementById('createNaceCode').value,
                officePhone: document.getElementById('createOfficePhone').value,
                mobilePhone: document.getElementById('createMobilePhone').value,
                email: document.getElementById('createEmail').value,
                webSite: document.getElementById('createWebSite').value,
                registrationAddress: document.getElementById('createRegistrationAddress').value,
                isActive: document.getElementById('createIsActive').checked,
                has2022AuthorizationCertificate: document.getElementById('createHas2022Authorization').checked
            };

            try {
                const response = await fetch('/api/company', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(companyData)
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    closeCreateModal();
                    loadCompanies();
                    alert('Firma başarıyla oluşturuldu!');
                } else {
                    alert(result.message || 'Firma oluşturulamadı!');
                }
            } catch (error) {
                console.error('Create error:', error);
                alert('Bir hata oluştu!');
            }
        });

        // Handle Edit Form Submit
        document.getElementById('editCompanyForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const companyId = document.getElementById('editCompanyId').value;
            const updateData = {
                id: parseInt(companyId),
                title: document.getElementById('editTitle').value,
                companyType: document.getElementById('editCompanyType').value,
                degree: document.getElementById('editDegree').value,
                registrationNumber: document.getElementById('editRegistrationNumber').value,
                tradeRegistrationNumber: document.getElementById('editTradeRegistrationNumber').value,
                capital: parseFloat(document.getElementById('editCapital').value) || 0,
                memberRegistrationDate: document.getElementById('editMemberRegistrationDate').value,
                professionalGroup: document.getElementById('editProfessionalGroup').value,
                naceCode: document.getElementById('editNaceCode').value,
                officePhone: document.getElementById('editOfficePhone').value,
                mobilePhone: document.getElementById('editMobilePhone').value,
                email: document.getElementById('editEmail').value,
                webSite: document.getElementById('editWebSite').value,
                registrationAddress: document.getElementById('editRegistrationAddress').value,
                isActive: document.getElementById('editIsActive').checked,
                has2022AuthorizationCertificate: document.getElementById('editHas2022Authorization').checked
            };

            try {
                const response = await fetch(`/api/company/${companyId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(updateData)
                });

                if (response.ok) {
                    closeEditModal();
                    loadCompanies();
                    alert('Firma başarıyla güncellendi!');
                } else {
                    alert('Güncelleme başarısız!');
                }
            } catch (error) {
                console.error('Update error:', error);
                alert('Bir hata oluştu!');
            }
        });

        // Format phone inputs
        document.getElementById('createOfficePhone').addEventListener('input', function(e) {
            let value = e.target.value.replace(/[^0-9]/g, '');
            if (value.length > 0) {
                let formatted = '';
                if (value.startsWith('0')) {
                    // Format: 0212 XXX XX XX
                    if (value.length >= 4) formatted = value.substring(0, 4) + ' ';
                    if (value.length >= 7) formatted += value.substring(4, 7) + ' ';
                    if (value.length >= 9) formatted += value.substring(7, 9) + ' ';
                    if (value.length >= 11) formatted += value.substring(9, 11);
                } else {
                    formatted = value;
                }
                e.target.value = formatted.trim();
            }
        });

        document.getElementById('createMobilePhone').addEventListener('input', function(e) {
            let value = e.target.value.replace(/[^0-9]/g, '');
            if (value.length > 0) {
                let formatted = '';
                if (value.startsWith('0')) {
                    // Format: 0 (5XX) XXX XX XX
                    formatted = '0';
                    if (value.length >= 2) formatted += ' (' + value.substring(1, 4);
                    if (value.length >= 5) formatted += ') ' + value.substring(4, 7);
                    if (value.length >= 8) formatted += ' ' + value.substring(7, 9);
                    if (value.length >= 10) formatted += ' ' + value.substring(9, 11);
                } else {
                    formatted = value;
                }
                e.target.value = formatted.trim();
            }
        });

        // Format edit modal phone inputs
        document.getElementById('editOfficePhone').addEventListener('input', function(e) {
            let value = e.target.value.replace(/[^0-9]/g, '');
            if (value.length > 0) {
                let formatted = '';
                if (value.startsWith('0')) {
                    // Format: 0212 XXX XX XX
                    if (value.length >= 4) formatted = value.substring(0, 4) + ' ';
                    if (value.length >= 7) formatted += value.substring(4, 7) + ' ';
                    if (value.length >= 9) formatted += value.substring(7, 9) + ' ';
                    if (value.length >= 11) formatted += value.substring(9, 11);
                } else {
                    formatted = value;
                }
                e.target.value = formatted.trim();
            }
        });

        document.getElementById('editMobilePhone').addEventListener('input', function(e) {
            let value = e.target.value.replace(/[^0-9]/g, '');
            if (value.length > 0) {
                let formatted = '';
                if (value.startsWith('0')) {
                    // Format: 0 (5XX) XXX XX XX
                    formatted = '0';
                    if (value.length >= 2) formatted += ' (' + value.substring(1, 4);
                    if (value.length >= 5) formatted += ') ' + value.substring(4, 7);
                    if (value.length >= 8) formatted += ' ' + value.substring(7, 9);
                    if (value.length >= 10) formatted += ' ' + value.substring(9, 11);
                } else {
                    formatted = value;
                }
                e.target.value = formatted.trim();
            }
        });

        // Format phone inputs for add contact modal
        document.getElementById('addContactMobilePhone').addEventListener('input', function(e) {
            let value = e.target.value.replace(/[^0-9]/g, '');
            if (value.length > 0) {
                let formatted = '';
                if (value.startsWith('0')) {
                    // Format: 0 (5XX) XXX XX XX
                    formatted = '0';
                    if (value.length >= 2) formatted += ' (' + value.substring(1, 4);
                    if (value.length >= 5) formatted += ') ' + value.substring(4, 7);
                    if (value.length >= 8) formatted += ' ' + value.substring(7, 9);
                    if (value.length >= 10) formatted += ' ' + value.substring(9, 11);
                } else {
                    formatted = value;
                }
                e.target.value = formatted.trim();
            }
        });

        // Edit Contact Mobile Phone formatting
        document.getElementById('editContactMobilePhone').addEventListener('input', function(e) {
            let value = e.target.value.replace(/[^0-9]/g, '');
            if (value.length > 0) {
                let formatted = '';
                if (value.startsWith('0')) {
                    // Format: 0 (5XX) XXX XX XX
                    formatted = '0';
                    if (value.length >= 2) formatted += ' (' + value.substring(1, 4);
                    if (value.length >= 5) formatted += ') ' + value.substring(4, 7);
                    if (value.length >= 8) formatted += ' ' + value.substring(7, 9);
                    if (value.length >= 10) formatted += ' ' + value.substring(9, 11);
                } else {
                    formatted = value;
                }
                e.target.value = formatted.trim();
            }
        });

        // Delete Company
        async function deleteCompany(id) {
            if (!confirm('Bu firmayı silmek istediğinizden emin misiniz?\n\nNot: Oy kaydı bulunan firmalar silinemez.')) {
                return;
            }

            try {
                const response = await fetch(`/api/company/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    loadCompanies();
                    alert('Firma başarıyla silindi!');
                } else {
                    const result = await response.json();
                    alert(result.message || 'Silme işlemi başarısız!');
                }
            } catch (error) {
                console.error('Delete error:', error);
                alert('Bir hata oluştu!');
            }
        }

        // Get Demo Companies
        function getDemoCompanies() {
            const companies = [
                {
                    id: 1,
                    title: 'ABC Teknoloji A.Ş.',
                    registrationNumber: '123456',
                    companyType: 'AS',
                    capital: 500000,
                    officePhone: '0212 123 4567',
                    email: 'info@abc.com',
                    registrationAddress: 'İstanbul, Türkiye',
                    professionalGroup: '5',
                    naceCode: '62.01',
                    isActive: true,
                    has2022AuthorizationCertificate: true
                },
                {
                    id: 2,
                    title: 'XYZ Yazılım Ltd. Şti.',
                    registrationNumber: '234567',
                    companyType: 'LTD',
                    capital: 250000,
                    mobilePhone: '0532 987 6543',
                    email: 'info@xyz.com',
                    registrationAddress: 'Ankara, Türkiye',
                    professionalGroup: '5',
                    naceCode: '62.02',
                    isActive: true,
                    has2022AuthorizationCertificate: false
                },
                {
                    id: 3,
                    title: 'DEF Sanayi A.Ş.',
                    registrationNumber: '345678',
                    companyType: 'AS',
                    capital: 1500000,
                    officePhone: '0216 555 6677',
                    email: 'info@def.com',
                    registrationAddress: 'İzmir, Türkiye',
                    professionalGroup: '1',
                    naceCode: '25.01',
                    isActive: true,
                    has2022AuthorizationCertificate: true
                },
                {
                    id: 4,
                    title: 'GHI İnşaat Ltd. Şti.',
                    registrationNumber: '456789',
                    companyType: 'LTD',
                    capital: 750000,
                    officePhone: '0224 444 3322',
                    email: 'info@ghi.com',
                    registrationAddress: 'Bursa, Türkiye',
                    professionalGroup: '3',
                    naceCode: '41.10',
                    isActive: false,
                    has2022AuthorizationCertificate: false
                },
                {
                    id: 5,
                    title: 'JKL Ticaret A.Ş.',
                    registrationNumber: '567890',
                    companyType: 'AS',
                    capital: 2000000,
                    officePhone: '0232 222 1111',
                    email: 'info@jkl.com',
                    registrationAddress: 'İzmir, Türkiye',
                    professionalGroup: '2',
                    naceCode: '46.90',
                    isActive: true,
                    has2022AuthorizationCertificate: true
                }
            ];
            
            // IsActive sıralaması: Aktifler önce, sonra pasifler
            companies.sort((a, b) => {
                if (a.isActive === b.isActive) {
                    // Aynı durumda ise isme göre sırala
                    return a.title.localeCompare(b.title, 'tr');
                }
                // Aktifler önce (true > false)
                return b.isActive - a.isActive;
            });
            
            return companies;
        }

        // Logout
        // Load User Info
        function loadUserInfo() {
            // Get user info from server-side claims
            const fullName = '@User.FindFirst("FullName")?.Value' || 'Kullanıcı';
            const role = '@(User.IsInRole("Admin") ? "Admin" : User.IsInRole("User") ? "User" : "Kullanıcı")' || 'Kullanıcı';
            
            let initials = 'KA';
            
            // Generate initials from full name
            if (fullName && fullName !== 'Kullanıcı' && fullName.trim() !== '') {
                const nameParts = fullName.trim().split(' ').filter(part => part.length > 0);
                if (nameParts.length >= 2) {
                    initials = (nameParts[0][0] + nameParts[nameParts.length - 1][0]).toUpperCase();
                } else if (nameParts.length === 1) {
                    initials = (nameParts[0][0] + nameParts[0][0]).toUpperCase();
                }
            }

            // Update UI elements
            const userNameEl = document.getElementById('userName');
            const userRoleEl = document.getElementById('userRole');
            const userInitialsEl = document.getElementById('userInitials');

            if (userNameEl) userNameEl.textContent = fullName;
            if (userRoleEl) userRoleEl.textContent = role;
            if (userInitialsEl) userInitialsEl.textContent = initials;

            console.log('User info loaded on Companies page:', { fullName, role, initials });
        }

        // Load Reports
        function loadReports() {
            alert('Raporlar sayfası hazırlanıyor...');
        }

        // İmzalı Belge Yükleme Fonksiyonları
        function uploadSignedDocument() {
            if (!currentCompanyId) {
                alert('Lütfen bir firma seçin.');
                return;
            }
            
            // Modal'ı aç ve company ID'yi set et
            document.getElementById('uploadCompanyId').value = currentCompanyId;
            document.getElementById('uploadSignedDocumentModal').classList.remove('hidden');
        }

        function closeUploadSignedDocumentModal() {
            document.getElementById('uploadSignedDocumentModal').classList.add('hidden');
            // Form'u temizle
            document.getElementById('uploadSignedDocumentForm').reset();
            document.getElementById('uploadCompanyId').value = '';
        }

        async function submitUploadSignedDocument() {
            const companyId = document.getElementById('uploadCompanyId').value;
            const fileInput = document.getElementById('signedDocumentFile');
            
            if (!fileInput.files[0]) {
                alert('Lütfen bir dosya seçin.');
                return;
            }

            const file = fileInput.files[0];
            
            // Dosya boyutu kontrolü (max 10MB)
            if (file.size > 10 * 1024 * 1024) {
                alert('Dosya boyutu 10MB\'dan büyük olamaz.');
                return;
            }

            // Dosya tipi kontrolü
            const allowedTypes = [
                'application/pdf', 
                'application/msword', 
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'image/jpeg',
                'image/jpg', 
                'image/png'
            ];
            if (!allowedTypes.includes(file.type)) {
                alert('Sadece PDF, DOC, DOCX, JPG, JPEG ve PNG dosyaları yükleyebilirsiniz.');
                return;
            }

            // FormData oluştur
            const formData = new FormData();
            formData.append('companyId', companyId);
            formData.append('signedDocument', file);

            try {
                // Loading göster
                const uploadButton = document.querySelector('#uploadSignedDocumentModal button[onclick="submitUploadSignedDocument()"]');
                const originalText = uploadButton.innerHTML;
                uploadButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 inline mr-1 animate-spin"></i>Yükleniyor...';
                uploadButton.disabled = true;

                const response = await fetch(`/api/company/${companyId}/upload-signed-document`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        alert('✅ İmzalı belge başarıyla yüklendi!');
                        closeUploadSignedDocumentModal();
                    } else {
                        alert(result.message || 'Dosya yüklenirken hata oluştu.');
                    }
                } else {
                    const errorData = await response.json();
                    alert(errorData.message || 'Dosya yüklenirken hata oluştu.');
                }
            } catch (error) {
                console.error('Upload error:', error);
                alert('Dosya yüklenirken hata oluştu.');
            } finally {
                // Loading'i geri al
                const uploadButton = document.querySelector('#uploadSignedDocumentModal button[onclick="submitUploadSignedDocument()"]');
                uploadButton.innerHTML = '<i data-lucide="upload" class="w-4 h-4 inline mr-1"></i>Yükle';
                uploadButton.disabled = false;
            }
        }

        // Onaylı Belge Yükleme Fonksiyonları
        function uploadApprovedDocument() {
            if (!currentCompanyId) {
                alert('Lütfen bir firma seçin.');
                return;
            }
            
            // Modal'ı aç ve company ID'yi set et
            document.getElementById('uploadApprovedCompanyId').value = currentCompanyId;
            document.getElementById('uploadApprovedDocumentModal').classList.remove('hidden');
        }

        function closeUploadApprovedDocumentModal() {
            document.getElementById('uploadApprovedDocumentModal').classList.add('hidden');
            // Form'u temizle
            document.getElementById('uploadApprovedDocumentForm').reset();
            document.getElementById('uploadApprovedCompanyId').value = '';
        }

        async function submitUploadApprovedDocument() {
            const companyId = document.getElementById('uploadApprovedCompanyId').value;
            const fileInput = document.getElementById('approvedDocumentFile');
            const sourceSelect = document.getElementById('approvedDocumentSource');
            const noteInput = document.getElementById('approvedDocumentNote');
            
            if (!fileInput.files[0]) {
                alert('Lütfen bir dosya seçin.');
                return;
            }

            if (!sourceSelect.value) {
                alert('Lütfen kaynak yeri seçin.');
                return;
            }

            const file = fileInput.files[0];
            const source = sourceSelect.value;
            const note = noteInput.value.trim();
            
            // Dosya boyutu kontrolü (max 10MB)
            if (file.size > 10 * 1024 * 1024) {
                alert('Dosya boyutu 10MB\'dan büyük olamaz.');
                return;
            }

            // Dosya tipi kontrolü - Onaylı belgeler için JPG/PNG de kabul ediyoruz
            const allowedTypes = [
                'application/pdf', 
                'application/msword', 
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'image/jpeg',
                'image/jpg',
                'image/png'
            ];
            if (!allowedTypes.includes(file.type)) {
                alert('Sadece PDF, DOC, DOCX, JPG, JPEG ve PNG dosyaları yükleyebilirsiniz.');
                return;
            }

            // Firma bilgisini al (dosya adlandırması için)
            const company = allCompanies.find(c => c.id == companyId);
            let fileName = file.name;
            if (company && company.registrationNumber) {
                const extension = file.name.split('.').pop();
                fileName = `${company.registrationNumber}_ITOYetkiBelgesi.${extension}`;
            }

            // FormData oluştur
            const formData = new FormData();
            formData.append('companyId', companyId);
            formData.append('approvedDocument', file, fileName);
            formData.append('source', source);
            formData.append('note', note);

            try {
                // Loading göster
                const uploadButton = document.querySelector('#uploadApprovedDocumentModal button[onclick="submitUploadApprovedDocument()"]');
                const originalText = uploadButton.innerHTML;
                uploadButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 inline mr-1 animate-spin"></i>Yükleniyor...';
                uploadButton.disabled = true;

                const response = await fetch(`/api/company/${companyId}/upload-approved-document`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        alert('✅ Onaylı belge başarıyla yüklendi!');
                        closeUploadApprovedDocumentModal();
                        // Belge listesini yenile
                        loadCompanyDocuments(companyId);
                    } else {
                        alert(result.message || 'Dosya yüklenirken hata oluştu.');
                    }
                } else {
                    const errorData = await response.json();
                    alert(errorData.message || 'Dosya yüklenirken hata oluştu.');
                }
            } catch (error) {
                console.error('Upload error:', error);
                alert('Dosya yüklenirken hata oluştu.');
            } finally {
                // Loading'i geri al
                const uploadButton = document.querySelector('#uploadApprovedDocumentModal button[onclick="submitUploadApprovedDocument()"]');
                uploadButton.innerHTML = '<i data-lucide="upload" class="w-4 h-4 inline mr-1"></i>Yükle';
                uploadButton.disabled = false;
            }
        }

        // Mobil Dropdown Toggle
        function toggleDocumentActions(docId) {
            const dropdown = document.getElementById(`docActions${docId}`);
            const allDropdowns = document.querySelectorAll('[id^="docActions"]');
            
            // Diğer tüm dropdown'ları kapat
            allDropdowns.forEach(dd => {
                if (dd.id !== `docActions${docId}`) {
                    dd.classList.add('hidden');
                }
            });
            
            // Bu dropdown'ı aç/kapat
            dropdown.classList.toggle('hidden');
        }

        // Dropdown dışına tıklandığında kapat
        document.addEventListener('click', function(event) {
            if (!event.target.closest('[id^="docActions"]') && !event.target.closest('button[onclick*="toggleDocumentActions"]')) {
                const allDropdowns = document.querySelectorAll('[id^="docActions"]');
                allDropdowns.forEach(dd => dd.classList.add('hidden'));
            }
        });

        // Belge Sil
        async function deleteDocument(documentType, documentName) {
            try {
                if (!currentCompanyId) {
                    alert('Lütfen bir firma seçin.');
                    return;
                }

                // Confirm mesajı
                const confirmMessage = `"${documentName}" belgesini silmek istediğinizden emin misiniz?\n\nBu işlem geri alınamaz!`;
                if (!confirm(confirmMessage)) {
                    return;
                }

                // API çağrısı
                const response = await fetch(`/api/company/${currentCompanyId}/document/${documentType}`, {
                    method: 'DELETE',
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        alert('✅ ' + result.message);
                        // Belge listesini yenile
                        loadCompanyDocuments(currentCompanyId);
                    } else {
                        alert('❌ ' + (result.message || 'Belge silinirken hata oluştu.'));
                    }
                } else {
                    const errorData = await response.json();
                    alert('❌ ' + (errorData.message || 'Belge silinirken hata oluştu.'));
                }
            } catch (error) {
                console.error('Delete error:', error);
                alert('❌ Belge silinirken hata oluştu.');
            }
        }

        // Logout
        async function logout() {
            if (confirm('Çıkış yapmak istediğinizden emin misiniz?')) {
                // Clear localStorage
                localStorage.removeItem('token');
                localStorage.removeItem('user');
                localStorage.clear();
                
                // Clear sessionStorage
                sessionStorage.clear();
                
                // Redirect to logout endpoint
                window.location.href = '/Auth/Logout';
            }
        }
    </script>
</body>
</html>