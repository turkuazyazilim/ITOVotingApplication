@model ITOVotingApplication.Web.Models.InvitationRegisterViewModel
@{
    ViewData["Title"] = "Saha Kullanıcısı Kayıt";
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ITO Oylama Sistemi</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
</head>
<body class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-2xl w-full space-y-8">
        <!-- Header -->
        <div class="text-center">
            <div class="mx-auto h-20 w-20 flex items-center justify-center rounded-full bg-blue-100">
                <svg class="h-12 w-12 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
            </div>
            <h2 class="mt-6 text-3xl font-bold text-gray-900">İTO Oylama Sistemi</h2>
            <p class="mt-2 text-sm text-gray-600">Saha Kullanıcısı Kayıt Formu</p>
        </div>

        <!-- Alert Container -->
        <div id="alertContainer" class="space-y-3"></div>

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg">
                <div class="flex">
                    <svg class="h-5 w-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                    </svg>
                    @TempData["ErrorMessage"]
                </div>
            </div>
        }

        <!-- Registration Form -->
        <div class="bg-white shadow-xl rounded-lg">
            <div class="px-6 py-8">
                <form id="invitationForm" class="space-y-6">
                    <input type="hidden" id="Token" value="@Model.Token" />

                    <!-- Personal Information -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-4 border-b border-gray-200 pb-2">
                            <i class="inline-block w-5 h-5 mr-2" data-lucide="user"></i>
                            Kişisel Bilgiler
                        </h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Ad *</label>
                                <input type="text" id="FirstName" required
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                                       placeholder="Adınızı giriniz">
                                <div class="text-red-500 text-xs mt-1 hidden" id="FirstName-error"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Soyad *</label>
                                <input type="text" id="LastName" required
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                                       placeholder="Soyadınızı giriniz">
                                <div class="text-red-500 text-xs mt-1 hidden" id="LastName-error"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">E-posta</label>
                                @if (Model.Email != null)
                                {
                                    <input type="email" id="Email" value="@Model.Email" readonly
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-600 cursor-not-allowed">
                                    <div class="text-xs text-gray-500 mt-1">Davet linkinden otomatik dolduruldu</div>
                                }
                                else
                                {
                                    <input type="email" id="Email"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                                           placeholder="email@ornek.com">
                                }
                                <div class="text-red-500 text-xs mt-1 hidden" id="Email-error"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Telefon Numarası *</label>
                                @if (Model.PhoneNumber != null)
                                {
                                    <input type="tel" id="PhoneNumber" value="@Model.PhoneNumber" readonly
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-600 cursor-not-allowed">
                                    <div class="text-xs text-gray-500 mt-1">Davet linkinden otomatik dolduruldu</div>
                                }
                                else
                                {
                                    <input type="tel" id="PhoneNumber" required
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                                           placeholder="0555 123 45 67">
                                }
                                <div class="text-red-500 text-xs mt-1 hidden" id="PhoneNumber-error"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Account Information -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-4 border-b border-gray-200 pb-2">
                            <i class="inline-block w-5 h-5 mr-2" data-lucide="key"></i>
                            Hesap Bilgileri
                        </h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 mb-1">Kullanıcı Adı *</label>
                                <input type="text" id="UserName" required readonly
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-600 cursor-not-allowed"
                                       placeholder="E-posta adresiniz kullanıcı adı olarak kullanılacak">
                                <div class="text-xs text-gray-500 mt-1">E-posta adresiniz otomatik olarak kullanıcı adı olarak kullanılacak</div>
                                <div class="text-red-500 text-xs mt-1 hidden" id="UserName-error"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Şifre *</label>
                                <div class="relative">
                                    <input type="password" id="Password" required
                                           class="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                                           placeholder="••••••••">
                                    <button type="button" onclick="togglePassword('Password')"
                                            class="absolute inset-y-0 right-0 pr-3 flex items-center">
                                        <i data-lucide="eye" class="h-5 w-5 text-gray-400"></i>
                                    </button>
                                </div>
                                <div class="text-red-500 text-xs mt-1 hidden" id="Password-error"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Şifre Tekrarı *</label>
                                <div class="relative">
                                    <input type="password" id="ConfirmPassword" required
                                           class="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                                           placeholder="••••••••">
                                    <button type="button" onclick="togglePassword('ConfirmPassword')"
                                            class="absolute inset-y-0 right-0 pr-3 flex items-center">
                                        <i data-lucide="eye" class="h-5 w-5 text-gray-400"></i>
                                    </button>
                                </div>
                                <div class="text-red-500 text-xs mt-1 hidden" id="ConfirmPassword-error"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Field Reference Information -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-4 border-b border-gray-200 pb-2">
                            <i class="inline-block w-5 h-5 mr-2" data-lucide="map-pin"></i>
                            Saha Referans Bilgileri
                        </h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Saha Referans Kategorisi</label>
                                @if (Model.FieldReferenceCategoryId.HasValue)
                                {
                                    <select id="FieldReferenceCategoryId" disabled
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-600 cursor-not-allowed">
                                        <option value="">Yükleniyor...</option>
                                    </select>
                                    <div class="text-xs text-gray-500 mt-1">Davet linkinden otomatik dolduruldu</div>
                                }
                                else
                                {
                                    <select id="FieldReferenceCategoryId"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white transition duration-200"
                                            onchange="loadSubCategories()">
                                        <option value="">Kategori seçiniz</option>
                                    </select>
                                }
                                <div class="text-red-500 text-xs mt-1 hidden" id="FieldReferenceCategoryId-error"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Saha Referans Alt Kategorisi</label>
                                @if (Model.FieldReferenceSubCategoryId.HasValue)
                                {
                                    <select id="FieldReferenceSubCategoryId" disabled
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-600 cursor-not-allowed">
                                        <option value="">Yükleniyor...</option>
                                    </select>
                                    <div class="text-xs text-gray-500 mt-1">Davet linkinden otomatik dolduruldu</div>
                                }
                                else
                                {
                                    <select id="FieldReferenceSubCategoryId" disabled
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white transition duration-200">
                                        <option value="">Önce kategori seçiniz</option>
                                    </select>
                                }
                                <div class="text-red-500 text-xs mt-1 hidden" id="FieldReferenceSubCategoryId-error"></div>
                            </div>
                        </div>
                        <div class="mt-2 text-sm text-gray-600 bg-blue-50 rounded-lg p-3">
                            <div class="flex">
                                <i data-lucide="info" class="h-5 w-5 text-blue-500 mr-2"></i>
                                <div>
                                    <p class="font-medium">Saha Referans Bilgileri Hakkında:</p>
                                    @if (Model.FieldReferenceCategoryId.HasValue || Model.FieldReferenceSubCategoryId.HasValue)
                                    {
                                        <p>Bu bilgiler davet linkinden otomatik olarak atanmıştır ve değiştirilemez.</p>
                                    }
                                    else
                                    {
                                        <p>Bu bilgiler hangi saha bölgesinden sorumlu olduğunuzu belirtmek için kullanılır. İsteğe bağlıdır.</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Submit Button -->
                    <div class="pt-6">
                        <button type="submit" id="submitBtn"
                                class="w-full flex justify-center items-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition duration-200">
                            <span id="submitText">SMS Kodu Gönder</span>
                            <svg id="submitSpinner" class="hidden animate-spin -mr-1 ml-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </button>
                    </div>

                    <!-- SMS Verification Step (Hidden by default) -->
                    <div id="smsVerificationStep" class="hidden">
                        <div class="border-t border-gray-200 pt-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4 text-center">
                                <i class="inline-block w-5 h-5 mr-2" data-lucide="smartphone"></i>
                                SMS Doğrulama
                            </h3>

                            <div class="bg-blue-50 rounded-lg p-4 mb-6">
                                <div class="flex">
                                    <i data-lucide="info" class="h-5 w-5 text-blue-500 mr-2 mt-0.5"></i>
                                    <div class="text-sm">
                                        <p class="font-medium text-blue-800 mb-1">SMS kodu gönderildi!</p>
                                        <p class="text-blue-700">
                                            <span id="phoneDisplay"></span> numarasına gönderilen 6 haneli kodu giriniz.
                                        </p>
                                        <p class="text-blue-600 mt-2 font-mono text-lg">
                                            <strong>Test Kodu: <span id="dummyCode" class="bg-yellow-200 px-2 py-1 rounded">123456</span></strong>
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">SMS Doğrulama Kodu</label>
                                    <input type="text" id="smsCode" maxlength="6"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-center text-lg font-mono tracking-widest transition duration-200"
                                           placeholder="000000">
                                    <div class="text-red-500 text-xs mt-1 hidden" id="smsCode-error"></div>
                                </div>

                                <div class="flex space-x-3">
                                    <button type="button" id="backToFormBtn"
                                            class="flex-1 py-3 px-4 border border-gray-300 rounded-lg shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200">
                                        <i data-lucide="arrow-left" class="inline-block w-4 h-4 mr-2"></i>
                                        Geri Dön
                                    </button>
                                    <button type="button" id="verifySmsBtn"
                                            class="flex-1 flex justify-center items-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed transition duration-200">
                                        <span id="verifyText">Doğrula ve Hesap Oluştur</span>
                                        <svg id="verifySpinner" class="hidden animate-spin -mr-1 ml-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Login Link -->
                    <div class="text-center pt-4 border-t border-gray-200">
                        <p class="text-sm text-gray-600">
                            Zaten hesabınız var mı?
                            <a href="@Url.Action("Login", "Auth")" class="font-medium text-blue-600 hover:text-blue-500 transition duration-200">
                                Giriş Yapın
                            </a>
                        </p>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <script>
        let allFieldCategories = [];
        let currentFormData = null;
        let generatedSmsCode = null;

        $(document).ready(function() {
            // Initialize Lucide icons
            lucide.createIcons();

            // Load field reference categories
            loadFieldReferenceCategories();

            // Initialize username from email if email is pre-filled
            updateUsernameFromEmail();

            // Handle form submission (Step 1: Send SMS)
            $('#invitationForm').submit(function(e) {
                e.preventDefault();
                sendSmsCode();
            });

            // Handle SMS verification
            $('#verifySmsBtn').click(function() {
                verifySmsAndRegister();
            });

            // Handle back button
            $('#backToFormBtn').click(function() {
                showRegistrationForm();
            });

            // Auto-format SMS code input
            $('#smsCode').on('input', function() {
                let value = this.value.replace(/[^0-9]/g, '');
                if (value.length > 6) value = value.slice(0, 6);
                this.value = value;
            });

            // Real-time validation
            $('#Password, #ConfirmPassword').on('input', function() {
                validatePasswordMatch();
            });

            $('#Email').on('input', function() {
                updateUsernameFromEmail();
                validateEmail();
            });

            $('#PhoneNumber').on('input', function() {
                validatePhoneNumber();
            });
        });

        async function loadFieldReferenceCategories() {
            try {
                const response = await fetch('/api/FieldReference/categories', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success && result.data) {
                        allFieldCategories = result.data;
                        const select = document.getElementById('FieldReferenceCategoryId');
                        select.innerHTML = '<option value="">Kategori seçiniz</option>';

                        result.data.forEach(category => {
                            if (category.isActive !== false) {
                                const option = document.createElement('option');
                                option.value = category.id;
                                option.textContent = category.categoryName;
                                select.appendChild(option);
                            }
                        });

                        // Pre-select if model has value
                        @if (Model.FieldReferenceCategoryId.HasValue)
                        {
                            <text>
                            select.value = @Model.FieldReferenceCategoryId;
                            // If category is pre-selected, it's from invitation link and should be read-only
                            select.disabled = true;
                            select.classList.add('bg-gray-50', 'text-gray-600', 'cursor-not-allowed');
                            loadSubCategories();
                            </text>
                        }
                    }
                } else {
                    console.error('Failed to load categories');
                    showError('Kategoriler yüklenirken hata oluştu');
                }
            } catch (error) {
                console.error('Error loading categories:', error);
                showError('Kategoriler yüklenirken hata oluştu');
            }
        }

        function loadSubCategories() {
            const categorySelect = document.getElementById('FieldReferenceCategoryId');
            const subCategorySelect = document.getElementById('FieldReferenceSubCategoryId');
            const selectedCategoryId = categorySelect.value;

            // Clear subcategory options
            subCategorySelect.innerHTML = '<option value="">Alt kategori seçiniz</option>';

            if (!selectedCategoryId) {
                subCategorySelect.innerHTML = '<option value="">Önce kategori seçiniz</option>';
                subCategorySelect.disabled = true;
                return;
            }

            // Find selected category
            const selectedCategory = allFieldCategories.find(c => c.id == selectedCategoryId);

            if (selectedCategory && selectedCategory.subCategories) {
                selectedCategory.subCategories.forEach(subCategory => {
                    if (subCategory.isActive !== false) {
                        const option = document.createElement('option');
                        option.value = subCategory.id;
                        option.textContent = subCategory.subCategoryName;
                        subCategorySelect.appendChild(option);
                    }
                });
                subCategorySelect.disabled = false;
            }

            if (subCategorySelect.children.length === 1) {
                subCategorySelect.innerHTML = '<option value="">Bu kategoride alt kategori yok</option>';
                subCategorySelect.disabled = true;
            }

            // Pre-select subcategory if available
            @if (Model.FieldReferenceSubCategoryId.HasValue)
            {
                <text>
                setTimeout(() => {
                    subCategorySelect.value = @Model.FieldReferenceSubCategoryId;
                    // If subcategory is pre-selected, it's from invitation link and should be read-only
                    subCategorySelect.disabled = true;
                    subCategorySelect.classList.add('bg-gray-50', 'text-gray-600', 'cursor-not-allowed');
                }, 100);
                </text>
            }
        }

        // Step 1: Send SMS Code (Validate form and show SMS verification)
        async function sendSmsCode() {
            clearAllErrors();

            const formData = {
                token: document.getElementById('Token').value,
                userName: document.getElementById('UserName').value.trim(),
                password: document.getElementById('Password').value,
                confirmPassword: document.getElementById('ConfirmPassword').value,
                email: document.getElementById('Email').value.trim() || null,
                phoneNumber: document.getElementById('PhoneNumber').value.trim() || null,
                firstName: document.getElementById('FirstName').value.trim(),
                lastName: document.getElementById('LastName').value.trim(),
                fieldReferenceCategoryId: document.getElementById('FieldReferenceCategoryId').value || null,
                fieldReferenceSubCategoryId: document.getElementById('FieldReferenceSubCategoryId').value || null
            };

            // Validate form before sending SMS
            if (!validateFormForSms(formData)) {
                return;
            }

            // Store form data for later use
            currentFormData = formData;

            // Generate dummy SMS code
            generatedSmsCode = generateDummySmsCode(formData.phoneNumber);

            // Show loading state
            setLoadingState(true, 'SMS kodu gönderiliyor...');

            // Simulate SMS sending delay
            setTimeout(() => {
                setLoadingState(false);
                showSmsVerificationStep(formData.phoneNumber);
            }, 1500);
        }

        // Step 2: Verify SMS and Register User
        async function verifySmsAndRegister() {
            clearAllErrors();

            const enteredCode = document.getElementById('smsCode').value.trim();

            if (!enteredCode) {
                showFieldError('smsCode', 'SMS kodu gereklidir');
                return;
            }

            if (enteredCode !== generatedSmsCode) {
                showFieldError('smsCode', 'SMS kodu hatalı');
                return;
            }

            // Show loading state
            setSmsLoadingState(true);

            try {
                const response = await fetch(`/invitation/${currentFormData.token}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(currentFormData)
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    showSuccess('Hesabınız başarıyla oluşturuldu! Giriş sayfasına yönlendiriliyorsunuz...');
                    setTimeout(() => {
                        window.location.href = '/Auth/Login';
                    }, 2500);
                } else {
                    showError(result.message || 'Kayıt işlemi başarısız');
                }
            } catch (error) {
                console.error('Registration failed:', error);
                showError('Kayıt işlemi sırasında bir hata oluştu');
            } finally {
                setSmsLoadingState(false);
            }
        }

        // Helper Functions
        function generateDummySmsCode(phoneNumber) {
            // For demo purposes, generate code based on phone number
            if (phoneNumber && phoneNumber.length >= 4) {
                // Use last 4 digits as first 4 digits of code, add 56
                const lastFour = phoneNumber.replace(/[^0-9]/g, '').slice(-4);
                return lastFour + '56';
            }
            return '123456'; // Default dummy code
        }

        function showSmsVerificationStep(phoneNumber) {
            // Hide registration form and show SMS verification
            document.getElementById('smsVerificationStep').classList.remove('hidden');
            document.getElementById('phoneDisplay').textContent = phoneNumber || 'Telefon numaranıza';
            document.getElementById('dummyCode').textContent = generatedSmsCode;

            // Scroll to SMS verification section
            document.getElementById('smsVerificationStep').scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });

            // Focus on SMS code input
            setTimeout(() => {
                document.getElementById('smsCode').focus();
            }, 500);
        }

        function showRegistrationForm() {
            // Hide SMS verification and show registration form
            document.getElementById('smsVerificationStep').classList.add('hidden');
            clearFieldError('smsCode');
            document.getElementById('smsCode').value = '';

            // Scroll back to form
            scrollToTop();
        }

        function validateFormForSms(formData) {
            let isValid = true;

            if (!formData.firstName) {
                showFieldError('FirstName', 'Ad alanı zorunludur');
                isValid = false;
            }

            if (!formData.lastName) {
                showFieldError('LastName', 'Soyad alanı zorunludur');
                isValid = false;
            }

            if (!formData.email) {
                showFieldError('Email', 'E-posta adresi zorunludur');
                isValid = false;
            } else if (!isValidEmail(formData.email)) {
                showFieldError('Email', 'Geçerli bir e-posta adresi giriniz');
                isValid = false;
            }

            if (!formData.phoneNumber) {
                showFieldError('PhoneNumber', 'Telefon numarası zorunludur');
                isValid = false;
            } else if (!isValidPhoneNumber(formData.phoneNumber)) {
                showFieldError('PhoneNumber', 'Geçerli bir telefon numarası giriniz');
                isValid = false;
            }

            if (!formData.password) {
                showFieldError('Password', 'Şifre zorunludur');
                isValid = false;
            } else if (formData.password.length < 6) {
                showFieldError('Password', 'Şifre en az 6 karakter olmalıdır');
                isValid = false;
            }

            if (!formData.confirmPassword) {
                showFieldError('ConfirmPassword', 'Şifre tekrarı zorunludur');
                isValid = false;
            } else if (formData.password !== formData.confirmPassword) {
                showFieldError('ConfirmPassword', 'Şifreler eşleşmiyor');
                isValid = false;
            }

            return isValid;
        }

        function validatePhoneNumber() {
            const phoneNumber = document.getElementById('PhoneNumber').value.trim();

            if (phoneNumber && !isValidPhoneNumber(phoneNumber)) {
                showFieldError('PhoneNumber', 'Geçerli bir telefon numarası giriniz (0555 123 45 67)');
            } else {
                clearFieldError('PhoneNumber');
            }
        }

        function isValidPhoneNumber(phone) {
            // Simple Turkish phone number validation
            const phoneRegex = /^(0)?\s?[5][0-9]{2}\s?[0-9]{3}\s?[0-9]{2}\s?[0-9]{2}$/;
            const cleanPhone = phone.replace(/\s/g, '');
            return phoneRegex.test(cleanPhone) || /^[5][0-9]{9}$/.test(cleanPhone);
        }

        function setSmsLoadingState(loading) {
            const verifyBtn = document.getElementById('verifySmsBtn');
            const verifyText = document.getElementById('verifyText');
            const verifySpinner = document.getElementById('verifySpinner');

            if (loading) {
                verifyBtn.disabled = true;
                verifyText.textContent = 'Doğrulanıyor...';
                verifySpinner.classList.remove('hidden');
            } else {
                verifyBtn.disabled = false;
                verifyText.textContent = 'Doğrula ve Hesap Oluştur';
                verifySpinner.classList.add('hidden');
            }
        }

        // Original registration function (kept for reference, but now unused)
        async function submitRegistrationForm() {
            clearAllErrors();

            const formData = {
                token: document.getElementById('Token').value,
                userName: document.getElementById('UserName').value.trim(),
                password: document.getElementById('Password').value,
                confirmPassword: document.getElementById('ConfirmPassword').value,
                email: document.getElementById('Email').value.trim() || null,
                phoneNumber: document.getElementById('PhoneNumber').value.trim() || null,
                firstName: document.getElementById('FirstName').value.trim(),
                lastName: document.getElementById('LastName').value.trim(),
                fieldReferenceCategoryId: document.getElementById('FieldReferenceCategoryId').value || null,
                fieldReferenceSubCategoryId: document.getElementById('FieldReferenceSubCategoryId').value || null
            };

            // Validate form
            if (!validateForm(formData)) {
                return;
            }

            // Show loading state
            setLoadingState(true);

            try {
                const response = await fetch(`/invitation/${formData.token}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    showSuccess('Hesabınız başarıyla oluşturuldu! Giriş sayfasına yönlendiriliyorsunuz...');
                    setTimeout(() => {
                        window.location.href = '/Auth/Login';
                    }, 2500);
                } else {
                    showError(result.message || 'Kayıt işlemi başarısız');
                }
            } catch (error) {
                console.error('Registration failed:', error);
                showError('Kayıt işlemi sırasında bir hata oluştu');
            } finally {
                setLoadingState(false);
            }
        }

        function validateForm(formData) {
            let isValid = true;

            if (!formData.firstName) {
                showFieldError('FirstName', 'Ad alanı zorunludur');
                isValid = false;
            }

            if (!formData.lastName) {
                showFieldError('LastName', 'Soyad alanı zorunludur');
                isValid = false;
            }

            // Username otomatik olarak email'den alınıyor, sadece email kontrolü yeterli
            if (!formData.email) {
                showFieldError('Email', 'E-posta adresi zorunludur');
                isValid = false;
            }

            if (!formData.password) {
                showFieldError('Password', 'Şifre zorunludur');
                isValid = false;
            } else if (formData.password.length < 6) {
                showFieldError('Password', 'Şifre en az 6 karakter olmalıdır');
                isValid = false;
            }

            if (!formData.confirmPassword) {
                showFieldError('ConfirmPassword', 'Şifre tekrarı zorunludur');
                isValid = false;
            } else if (formData.password !== formData.confirmPassword) {
                showFieldError('ConfirmPassword', 'Şifreler eşleşmiyor');
                isValid = false;
            }

            if (formData.email && !isValidEmail(formData.email)) {
                showFieldError('Email', 'Geçerli bir e-posta adresi giriniz');
                isValid = false;
            }

            return isValid;
        }

        function validatePasswordMatch() {
            const password = document.getElementById('Password').value;
            const confirmPassword = document.getElementById('ConfirmPassword').value;

            if (confirmPassword && password !== confirmPassword) {
                showFieldError('ConfirmPassword', 'Şifreler eşleşmiyor');
            } else {
                clearFieldError('ConfirmPassword');
            }
        }

        function updateUsernameFromEmail() {
            const email = document.getElementById('Email').value.trim();
            const userNameField = document.getElementById('UserName');

            // Email adresi ile kullanıcı adını eşitle
            userNameField.value = email;

            // Username alanının hata durumunu temizle
            clearFieldError('UserName');
        }

        function validateEmail() {
            const email = document.getElementById('Email').value.trim();

            if (email && !isValidEmail(email)) {
                showFieldError('Email', 'Geçerli bir e-posta adresi giriniz');
            } else {
                clearFieldError('Email');
            }
        }

        function isValidEmail(email) {
            const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            return emailRegex.test(email);
        }

        function togglePassword(fieldId) {
            const field = document.getElementById(fieldId);
            const button = field.nextElementSibling.querySelector('i');

            if (field.type === 'password') {
                field.type = 'text';
                button.setAttribute('data-lucide', 'eye-off');
            } else {
                field.type = 'password';
                button.setAttribute('data-lucide', 'eye');
            }

            lucide.createIcons();
        }

        function setLoadingState(loading, message) {
            const submitBtn = document.getElementById('submitBtn');
            const submitText = document.getElementById('submitText');
            const submitSpinner = document.getElementById('submitSpinner');

            if (loading) {
                submitBtn.disabled = true;
                submitText.textContent = message || 'İşleniyor...';
                submitSpinner.classList.remove('hidden');
            } else {
                submitBtn.disabled = false;
                submitText.textContent = 'SMS Kodu Gönder';
                submitSpinner.classList.add('hidden');
            }
        }

        function showError(message) {
            const alertHtml = `
                <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                    <div class="flex">
                        <svg class="h-5 w-5 text-red-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                        </svg>
                        <div class="text-sm text-red-800">${message}</div>
                    </div>
                </div>
            `;

            document.getElementById('alertContainer').innerHTML = alertHtml;
            scrollToTop();
        }

        function showSuccess(message) {
            const alertHtml = `
                <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div class="flex">
                        <svg class="h-5 w-5 text-green-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                        </svg>
                        <div class="text-sm text-green-800">${message}</div>
                    </div>
                </div>
            `;

            document.getElementById('alertContainer').innerHTML = alertHtml;
            scrollToTop();
        }

        function showFieldError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const errorElement = document.getElementById(fieldId + '-error');

            field.classList.add('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
            field.classList.remove('border-gray-300', 'focus:ring-blue-500', 'focus:border-blue-500');

            if (errorElement) {
                errorElement.textContent = message;
                errorElement.classList.remove('hidden');
            }
        }

        function clearFieldError(fieldId) {
            const field = document.getElementById(fieldId);
            const errorElement = document.getElementById(fieldId + '-error');

            field.classList.remove('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
            field.classList.add('border-gray-300', 'focus:ring-blue-500', 'focus:border-blue-500');

            if (errorElement) {
                errorElement.classList.add('hidden');
            }
        }

        function clearAllErrors() {
            document.getElementById('alertContainer').innerHTML = '';

            ['FirstName', 'LastName', 'Password', 'ConfirmPassword', 'Email', 'PhoneNumber', 'smsCode'].forEach(fieldId => {
                clearFieldError(fieldId);
            });
        }

        function scrollToTop() {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
    </script>
</body>
</html>