// <auto-generated />
using System;
using ITOVotingApplication.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITOVotingApplication.Core.Migrations
{
    [DbContext(typeof(VotingDbContext))]
    [Migration("20251007141542_AddDocumentStatusToCompany")]
    partial class AddDocumentStatusToCompany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.BallotBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BallotBoxDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("cdBallotBox", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommitteeDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("cdCommittee", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveContactId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DocumentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Has2022AuthorizationCertificate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OfficePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfessionalGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TradeRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ActiveContactId");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.ToTable("cdCompany", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorizationType")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("EligibleToVote")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentityNum")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "IdentityNum");

                    b.ToTable("cdContacts", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.FieldReferenceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasDatabaseName("IX_FieldReferenceCategory_CategoryName");

                    b.ToTable("prFieldReferenceCategories", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.FieldReferenceSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "SubCategoryName")
                        .IsUnique()
                        .HasDatabaseName("IX_FieldReferenceSubCategory_CategoryId_SubCategoryName");

                    b.ToTable("prFieldReferenceSubCategories", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("cdRoles", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("cdUsers", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.UserInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UsedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UsedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UsedByUserId");

                    b.ToTable("trUserInvitations", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FieldReferenceCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldReferenceSubCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldReferenceCategoryId");

                    b.HasIndex("FieldReferenceSubCategoryId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("prUsersRoles", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.VoteTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BallotBoxId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("BallotBoxId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ContactId", "BallotBoxId")
                        .IsUnique();

                    b.ToTable("trVoteTransactions", (string)null);
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.Company", b =>
                {
                    b.HasOne("ITOVotingApplication.Core.Entities.Contact", "ActiveContact")
                        .WithMany("ActiveForCompanies")
                        .HasForeignKey("ActiveContactId");

                    b.Navigation("ActiveContact");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.Contact", b =>
                {
                    b.HasOne("ITOVotingApplication.Core.Entities.Company", "Company")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.FieldReferenceSubCategory", b =>
                {
                    b.HasOne("ITOVotingApplication.Core.Entities.FieldReferenceCategory", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.UserInvitation", b =>
                {
                    b.HasOne("ITOVotingApplication.Core.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITOVotingApplication.Core.Entities.User", "UsedByUser")
                        .WithMany()
                        .HasForeignKey("UsedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UsedByUser");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.UserRole", b =>
                {
                    b.HasOne("ITOVotingApplication.Core.Entities.FieldReferenceCategory", "FieldReferenceCategory")
                        .WithMany()
                        .HasForeignKey("FieldReferenceCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ITOVotingApplication.Core.Entities.FieldReferenceSubCategory", "FieldReferenceSubCategory")
                        .WithMany("UserRoles")
                        .HasForeignKey("FieldReferenceSubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ITOVotingApplication.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITOVotingApplication.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldReferenceCategory");

                    b.Navigation("FieldReferenceSubCategory");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.VoteTransaction", b =>
                {
                    b.HasOne("ITOVotingApplication.Core.Entities.BallotBox", "BallotBox")
                        .WithMany("VoteTransactions")
                        .HasForeignKey("BallotBoxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITOVotingApplication.Core.Entities.Company", "Company")
                        .WithMany("VoteTransactions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITOVotingApplication.Core.Entities.Contact", "Contact")
                        .WithMany("VoteTransactions")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITOVotingApplication.Core.Entities.User", "CreatedUser")
                        .WithMany("CreatedVoteTransactions")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BallotBox");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.BallotBox", b =>
                {
                    b.Navigation("VoteTransactions");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.Company", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("VoteTransactions");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.Contact", b =>
                {
                    b.Navigation("ActiveForCompanies");

                    b.Navigation("VoteTransactions");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.FieldReferenceCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.FieldReferenceSubCategory", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ITOVotingApplication.Core.Entities.User", b =>
                {
                    b.Navigation("CreatedVoteTransactions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
